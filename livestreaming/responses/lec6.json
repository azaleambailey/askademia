[
    {
        "Conversation History": "\t",
        "GPT Response": "No, you do not have to get Slido questions right to receive participation points. Participation is graded on completion, not correctness, so as long as you submit a response, you will receive credit.",
        "Recent Audio": "",
        "Recent Video": "",
        "Retrieved Audio": "",
        "Retrieved Notes": "uestions are launched; or (2) asynchronously using a link provided after lecture.\n\n-   Lecture participation is graded using poll responses on a 0/1 basis.\n    -   Synchronous Participation: complete at least one participation poll question during the live lecture timeslot (11:00am-12:30pm, Tuesdays and Thursdays). As long as you submit a response to at least one poll question in this timeframe, you will receive synchronous attendance credit.\n    -   Asynchronous Participation: complete all participation po\nsection or on their own time.** The content covered in these sections is designed to solidify understanding of key lecture concepts and prepare students for homework assignments. It is to your benefit to actively participate in all discussions.\n\nEach week, we will provide a conceptual review covering the topics pertinent to the discussion worksheet at [this Youtube playlist](https://www.youtube.com/playlist?list=PLQCcNQgUcDfplNp0itu2QqVjoDE9u5iow). Slides for the content review are linked [here](https://dri\nll questions from the link provided on the course website within one week of the corresponding lecture.\n    -   In both cases, participation is graded on completion, not correctness.\n-   If you submit all participation polls over the course of the semester (i.e., do not use any of the three automatic drops), you will receive +0.5% bonus points applied to your final overall grade in the class.\n-   See the [Policies](https://ds100.org/fa24/syllabus/#policies) section for lecture participation drops.\n\n### Disc",
        "Retrieved Video": "",
        "Question": "do we have to get slido questions right to get participation points?",
        "Timestamp": 4,
        "TA Response": "No, you get participation points as long as you responded.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "It seems that the Google Slides for the lecture are only available in presentation mode and not for download. You might want to check if there is an option to request access for download from the instructor or see if there are any shared folders or links provided for downloading the slides. Alternatively, you could take notes or screenshots during the presentation for your reference.",
        "Recent Audio": "a little tricky though, because technically it's computed using ABCDS which are converted to numbers and then average over years. So it's still, we think of it as continuous. You kind of see these, these are sort of fuzzy whether that's discrete or continuous. Income bracket low, medium or high. Cy Well, there's an ordering to these. If you're building a plot and you plot the bar graph and you have a low, medium and high and you do low, high, medium, that's ridiculous. Don't do that. There's an order to those variables. See Race or ethnicity. The. Nominal snow ordering just names. Shirt size. Small, Medium, Large C, Good C and Yelp star rating. This was last week's poll. Let's do it again just to see how we build in. OK, we got we got the right answers. Yelp star rating. All right, so you're voting. I'm going to talk about it because we're behind Continue voting. There isn't really a concrete right answer to this. It could be a couple of things. If we're really digging into what it means to be a star, five stars, 4 stars, three stars. They have very different meanings. Isn't like 4 is a little bit less than five or three is a little bit less than 4? Some people are like 4:00 and 5:00 is a lot. And then, you know, 3 is I did not like this restaurant at all. Should be different things to different peoples. Different gaps between them could suggest that they're ordinal.",
        "Recent Video": "Active poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n67%\nQuantitative - Discrete\n33%\nJoin at\nQualitative - Nominal\n0%\nslido.com\n#3599 224\nQualitative - Ordinal\n0%\n2024-09-17 11:14:50\n\nActive poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n59%\nQuantitative - Discrete\n24%\nJoin at\nQualitative - Ordinal\n14%\nslido.com\n#3599 224\nQualitative - Nominal\n4%\n2024-09-17 11:14:55\n",
        "Retrieved Audio": "So at the end of last lecture we didn't get to do this, but it's a good way to think through these kinds of types of variables.\nThat might not be a reasonable way to think about them. Might be reasonable.\nAll right, So welcome to the next lecture in Data 100 on EDA. Please sign this slide if you haven't done so already. The last lecture I went a little bit too slowly. Today I'm going to pick up the pace we need to finish data wrangling and EDA. They were transitioned to text strangling and regular expression.",
        "Retrieved Notes": "ve.google.com/drive/folders/1106WtH7rgzKBingzQzU4S-3G8iSt9tNu?usp=sharing). We recommend watching the content review before your discussion section. Discussion sections will not include any content review, they will solely be focused on problem-solving and Q&A.\n\n> This semester, we are offering two different grading schemes - graded versus ungraded discussion attendance. Discussion sections will commence in the second week of class, and students will need to choose between the two grading schemes, and these\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
        "Retrieved Video": "slido\nhey Gonzalez De, h.\nJoin at\nslido.com\n#3599 224\n2024-09-17 11:10:17\n\nbles.\n4\n2024-09-17 11:14:41\n\nActive poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n67%\nQuantitative - Discrete\n33%\nJoin at\nQualitative - Nominal\n0%\nslido.com\n#3599 224\nQualitative - Ordinal\n0%\n2024-09-17 11:14:50\n",
        "Question": "The google slides show only in presentation mode, I don\u2019t think we\u2019re able to download them.",
        "Timestamp": 345,
        "TA Response": "When you go to file--> download, you should be able to download slides.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "The focus is on both how the data is gathered and how it is structured. The lecture emphasizes understanding the organization and content of the data, determining what data is needed, and ensuring that the data is representative of the population of interest. Additionally, it discusses the importance of understanding variable types, such as qualitative and quantitative, and how they can be used in analysis and visualization.",
        "Recent Audio": "ordering just names. Shirt size. Small, Medium, Large C, Good C and Yelp star rating. This was last week's poll. Let's do it again just to see how we build in. OK, we got we got the right answers. Yelp star rating. All right, so you're voting. I'm going to talk about it because we're behind Continue voting. There isn't really a concrete right answer to this. It could be a couple of things. If we're really digging into what it means to be a star, five stars, 4 stars, three stars. They have very different meanings. Isn't like 4 is a little bit less than five or three is a little bit less than 4? Some people are like 4:00 and 5:00 is a lot. And then, you know, 3 is I did not like this restaurant at all. Should be different things to different peoples. Different gaps between them could suggest that they're ordinal. That might not be a reasonable way to to think about them might be reasonable. When we build models, we'll often do aggression on things like Yelp stars. We'll treat them as a quantitative, continuous entity, and that's also somewhat reasonable. So it could be both, and when you're doing your analysis you might take a mix of both. If you're trying to visualize these, maybe the right way to compute a star to describe what's going on at the starting for a restaurant. Is to look at the histogram, the star ratings or a bar chart the star ratings.",
        "Recent Video": "Active poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, N ...\nQuantitative - Continuous\n64%\nQuantitative - Discrete\n19%\nJoin at\nQualitative - Ordinal\n16%\nslido.com\n#3599 224\nQualitative - Nominal\n1%\n2024-09-17 11:15:63\n\nActive poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h.\nQuantitative - Continuous\n65%\nQuantitative - Discrete\n18%\nJoin at\nQualitative - Ordinal\n15%\nslido.com\n#3599 224\nQualitative - Nominal\n2%\n2024-09-17 11:16:17\n",
        "Retrieved Audio": "This important topic, it's important now for how we approach our data processing, how we understand our variables, and also important as we think about visualization. And in the end of last lecture, we introduced this tree, a way of thinking about the variables that we are working with here looks like in Data 100.\nSo it could be both, and when you're doing your analysis, you might take a mix of both. If you're trying to visualize these, maybe the right way to compute a star to describe what's going to starting for a restaurant is to look at the histogram, the star ratings, or a bar chart, the star ratings.\nSo it could be both, and when you're doing your analysis you might take a mix of both. If you're trying to visualize these, maybe the right way to compute a star to describe what's going on at the starting for a restaurant.",
        "Retrieved Notes": "ng*\n<div style=\"text-align: center;\"> <img src=\"images/data_acquisition.PNG\" alt='data_acquisition' width='500'></div>\n### Understand the Data\nRaw data itself is not inherently useful. It's impossible to discern all the patterns and relationships between variables without carefully investigating them. Therefore, translating pure data into actionable insights is a key job of a data scientist. For example, we may choose to ask:\n- How is our data organized, and what does it contain?\n    - Knowing what the data\ncrucial to ask the following:  \n- What data do we have, and what data do we need?\n    - Define the units of the data (people, cities, points in time, etc.) and what features to measure.\n- How will we sample more data?\n    - Scrape the web, collect manually, run experiments, etc.\n- Is our data representative of the population we want to study?\n    - If our data is not representative of our population of interest, then we can come to incorrect conclusions.\n    \nKey procedures: *data acquisition*, *data cleani\ner><img src = \"images/vis_9.png\" width=300px></img></center>\n<br />\nLet's frame this problem through the lens of the data science lifecycle.\n<center><img src = \"images/data_life_cycle.PNG\" width=300px></img></center>\n### 1. Question/Problem Formulation\n::: {.callout-note}\n#### Driving Questions\n- What do we want to know?\n- What problems are we trying to solve?\n- What are the hypotheses we want to test?\n- What are our metrics for success? \n:::\nThe old system was unfair because it was systemically inaccurate;",
        "Retrieved Video": "ID number\nNote that qualitative variables could have numeric levels;\nconversely, quantitative variables could be stored as strings!\n2024-09-17 11:12:02\n\nID number\nNote that qualitative variables could have numeric levels;\nconversely, quantitative variables could be stored as strings!\n2024-09-17 11:12:02\n\nVariable Feature Types\nVariable\nMany variables\nIntervals have\nneatly in one or wiese\nmeaning.\ncategories !!\nQuantitative\nQualitative\n(categorical)\n3\n2024-09-17 11:10:45\n",
        "Question": "Is the focus on how the data is gathered / decided or how it is structured?",
        "Timestamp": 377,
        "TA Response": "More about how it is structured and what it \"means\"! The type of the data determines what kind of data analysis we can conduct on it.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "Yelp star ratings can actually be considered discrete because they are typically given as whole numbers (1 to 5 stars), which are distinct and separate values. However, the lecture suggests that while they can be treated as discrete, they are often modeled as ordinal or even continuous for analysis purposes. This is because the differences between star ratings are not always equal, and treating them as continuous can simplify predictive modeling. The choice of how to treat them depends on the context and the specific analysis being performed.",
        "Recent Audio": "I might treat that as a discrete thing, right? Again, I'm reporting the the the magnitude of each of the different star categories. Or I might just give you an average and a variance and so on. So some of these are tricky. When I model this, I often treat this as ordinal, but it could also be treated as continuous, so with one interpretation. She probably this is a reverse order. So this is what my, my, my favorite restaurants on campus right now. Mine coffee, excellent coffee shop. I don't get discounts there, but I should. If you look at their ratings, right, I can give you these two visualizations. This is treating it as just a quantitative continuous thing. This is treating it more as an ordinal thing, right? I'm telling you the accounts of each of the categories decide which one is more informative to you. All right, so this wraps up this long discussion we spent most of last lecture on around the structure of data, what's its shape? We talked about different types. Actually bring this in right now. We talked about different formats, recursive formats like Jason, these nested representations of data. We talked about records being nested. How do we define a record? Is it a row? Is it, you know, a part of a Jason object? We talked about nesting records when you're working with these complex data types, finding records inside of records and maybe expanding them into more fine grained things. We talked about granularity.",
        "Recent Video": "Are the data in a standard format or encoding?\nTabular data: CSV, TSV, Excel, SQL\nStructure -- the \"shape\" of a daney Gonzalez Phe, A-\nNested data: JSON or XML\n.\nAre the data organized in records or nested?\nGranularity - how fine/coarse is each\nCan we define records by parsing the\ndatum\ndata?\nScope - how (in)complete is the data\nSummary\nYou will do the most data\nwrangling when analyzing\nthe structure of your data.\n7\n2024-09-17 11:17:29\n\nAre the data in a standard format or encoding?\nTabular data: CSV, TSV, Excel, SQL\nStructure -- the \"shape\" of a daisy Gonzales Ile, A.\nNested data: JSON or XML\nAre the data organized in records or nested?\nGranularity -- how fine/coarse is each\nCan we define records by parsing the\ndatum\ndata?\nCan we reasonably un-nest the data?\nScope - how (in)complete is the data\nDoes the data reference other data?\nSummary\nYou will do the most data\nwrangling when analyzing\nthe structure of your data.\n7\n2024-09-17 11:17:62\n",
        "Retrieved Audio": "When we build models, we'll often do aggression on things like Yelp stars. We'll treat them as a quantitative, continuous entity, and that's also somewhat reasonable.\nRight. Or I give you the average, it's 3.6 stars. There's a lot more information in that histogram. I might treat that as a discrete thing. Or again, I'm reporting the the the.\nSo it could be both, and when you're doing your analysis, you might take a mix of both. If you're trying to visualize these, maybe the right way to compute a star to describe what's going to starting for a restaurant is to look at the histogram, the star ratings, or a bar chart, the star ratings.",
        "Retrieved Notes": "he plateau to the right is slightly tilted. Because gradient descent follows the tilted loss surface downwards, it never converges.\nThe diverging weights cause the model to be **overconfident**. Say we add a new point $(x, y) = (-0.5, 1)$. Following the behavior above, our model will incorrectly predict $p=0$, and thus, $\\hat y = 0$.\n<center><img src=\"images/toy_linear_separable_dataset_2.png\" alt='toy_linear_separability' width='450'></center>\n<br>\nThe loss incurred by this misclassified point is infinite.\n variable can also be represented using a histogram. If a variable is **continuous**, meaning it can take on infinitely many values, we can illustrate its distribution using a density curve. \n<p align=\"center\">\n<img src=\"images/discrete_continuous.png\" alt='discrete_continuous' width='700'>\n</p>\nWe often don\u00e2\u0080\u0099t know the (true) distribution and instead compute an empirical distribution. If you flip a coin 3 times and get {H, H, T}, you may ask \u00e2\u0080\u0094\u00e2\u0080\u0094 what is the probability that the coin will land heads?\nering for grading bins; if there is a big gap between two people, draw a grading threshold there. The idea is that grade clustering should be more like the figure below on the left, not the right.\n<center><img src=\"images/grading.png\" alt='grading' width='600'></center>\n## Picking K\nThe algorithms we\u00e2\u0080\u0099ve discussed require us to pick a $K$ before we start. But how do we pick $K$? Often, the best $K$ is subjective. For example, consider the state plot below. \n<center><img src=\"images/states.png\" alt='states",
        "Retrieved Video": "Yelp Rating\nStar ratings are often treat\nbey Gonzalez Phe,\nQuantitative continuous\nQualitative ordinal\nMind Coffee\nIssues with both interpretations:\nNot all differences are the same\n..\n*\nPredictive modeling often easier in\n4.7 (93 reviews)\nquantitative continuous\nClaimed . $$ . Coffee & Tea, Coffee Roasteries\nQuantitative Discrete/Cont.\nQualitative Ordinal Visualization\nVisualization\n5 stars\nOverall rating\n4 stars\n*\n*\n3 stars\n93 reviews\n2 stars\n1 star\n6\n2024-09-17 11:16:45\n\nYelp Rating\nStar ratings are often treat\nbey Gonzalez Phe,\nQuantitative continuous\nQualitative ordinal\nMind Coffee\nIssues with both interpretations:\nNot all differences are the same\n..\n*\nPredictive modeling often easier in\n4.7 (93 reviews)\nquantitative continuous\nClaimed . $$ . Coffee & Tea, Coffee Roasteries\nQuantitative Discrete/Cont.\nQualitative Ordinal Visualization\nVisualization\n5 stars\nOverall rating\n4 stars\n*\n*\n3 stars\n93 reviews\n2 stars\n1 star\n6\n2024-09-17 11:16:45\n\nE Active poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nJoey Gonzalez De, h ...\nQuantitative - Continuous\n0%\nQuantitative - Discrete\n0%\nJoin at\nQualitative - Nominal\n0%\nslido.com\n#3599 224\nQualitative - Ordinal\n0%\n2024-09-17 11:14:45\n",
        "Question": "why yelp star rate cannot be discrete",
        "Timestamp": 467,
        "TA Response": "Yelp reviews are typically given in star ratings, which are ordinal because they reflect a ranking order: 5 stars is better than 4 stars, which is better than 3 stars. We could consider Yelp ratings to be qualitative ordinal because the difference between the star levels (e.g., the \"distance\" between 2 stars and 3 stars) isn't necessarily meaningful or consistent. A 4-star review isn\u2019t necessarily twice as good as a 2-star review, and the difference in satisfaction between 3 and 4 stars may not be the same as between 4 and 5 stars. We could also consider them to be qualitative continuous. For instance, it is common to see that something has, say, a 4.7 star rating on Yelp, as the average of the reviews make sense as continuous variables. Also, the reason it is not discrete quantitative is because the \"meaning\" of different star ratings is not quite discrete. For example, the difference in satisfaction between 3 and 4 stars tends to be smaller than the difference between 4 and 5 stars.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "Yelp reviews are often treated as continuous in predictive modeling because they can be averaged across many reviews, resulting in non-integer values like 3.6 stars. While individual ratings are discrete (1 to 5 stars, or sometimes half stars), the average rating can take on a continuous range of values. This continuous treatment allows for more nuanced analysis and modeling, even though the underlying data is discrete.",
        "Recent Audio": "treating it more as an ordinal thing, right? I'm telling you the accounts of each of the categories decide which one is more informative to you. All right, so this wraps up this long discussion we spent most of last lecture on around the structure of data, what's its shape? We talked about different types. Actually bring this in right now. We talked about different formats, recursive formats like Jason, these nested representations of data. We talked about records being nested. How do we define a record? Is it a row? Is it, you know, a part of a Jason object? We talked about nesting records when you're working with these complex data types, finding records inside of records and maybe expanding them into more fine grained things. We talked about granularity. We're talking about referencing data, referencing other data. So you have lots of tables. You often need to join across those tables. When emerge when we need to get external data? We just wrapped up talking about fields. What are the columns? What do they represent? The various types? OK, so both how they're encoded and the type of data that is in that color. All right, so I want to wrap up the end of this EDA lecture. I talked about scope and temporality. You're a bit quicker. So scope, which we'll talk more about with sampling is what does the data reflect relative to the population I'm thinking about. So I'm interested in this population here. My data maybe looks like this.",
        "Recent Video": "Scope\nWill my data be enough to answer my question?\nJoey Gonzalez Phe, h.\nExample: I am interested in studying crime in California\nbut I only have Berkeley crime data.\nNeed to\nNeed more\nFilter\ndata\nSolution: collect more data/change research question\nData\nIs my data too broad?\nExample: I am interested in student grades for Data100\nbut have student grades for all Data Science classes.\nNeed to\nSolution: Filtering = Implications on sample?\nFilter\nPopulation\no If the data is a sample I may have poor coverage\nafter filtering (More on this next week)\nData\nDoes my data cover the right time frame?\n\"Scope\" questions are defined by\n. Which brings us to Temporality\nyour question/problem and inform\nif you need better-scoped data.\n2024-09-17 11:18:21\n\nScope\nWill my data be enough to answer my question?\nJoey Gonzalez Phe, h ...\nExample: I am interested in studying crime in California\nbut I only have Berkeley crime data.\nNeed to\nNeed more\nFilter\ndata\nSolution: collect more data/change research question\nData\nIs my data too broad?\nExample: I am interested in student grades for Data100\nbut have student grades for all Data Science classes.\nNeed to\nSolution: Filtering = Implications on sample?\nFilter\nPopulation\no If the data is a sample I may have poor coverage\nafter filtering (More on this next week)\nData\nDoes my data cover the right time frame?\n\"Scope\" questions are defined by\n. Which brings us to Temporality\nyour question/problem and inform\nif you need better-scoped data.\n9\n2024-09-17 11:18:36\n",
        "Retrieved Audio": "All right, so you're voting. I'm going to talk about it because we're behind Continue voting. There isn't really a concrete right answer to this. It could be a couple of things. If we're really digging into what it means to be a star, five stars, 4 stars, three stars. They have very different meanings. Isn't like 4 is a little bit less than five or three is a little bit less than 4? Some people are like 4:00 and 5:00 is a lot. And then, you know, 3 is I did not like this restaurant at all.\nWhen we build models, we'll often do aggression on things like Yelp stars. We'll treat them as a quantitative, continuous entity, and that's also somewhat reasonable.\nRight. Or I give you the average, it's 3.6 stars. There's a lot more information in that histogram. I might treat that as a discrete thing. Or again, I'm reporting the the the.",
        "Retrieved Notes": " variable can also be represented using a histogram. If a variable is **continuous**, meaning it can take on infinitely many values, we can illustrate its distribution using a density curve. \n<p align=\"center\">\n<img src=\"images/discrete_continuous.png\" alt='discrete_continuous' width='700'>\n</p>\nWe often don\u00e2\u0080\u0099t know the (true) distribution and instead compute an empirical distribution. If you flip a coin 3 times and get {H, H, T}, you may ask \u00e2\u0080\u0094\u00e2\u0080\u0094 what is the probability that the coin will land heads?\n_continuous' width='600'>\n</p>\nIf we sum up the total area of the bars/under the density curve, we should get 100%, or 1.\nWe can show the distribution of $Y$ in the following tables. The table on the left lists all possible samples of $s$ and the number of times they can appear ($Y(s)$). We can use this to calculate the values for the table on the right, a **probability distribution table**. \n<p align=\"center\">\n<img src=\"images/distribution.png\" alt='distribution' width='600'>\n</p>\nRather than fully write o\nr reveals the key visual intuition. While the two columns visually span a 2D space as a line, the data does not deviate at all from that singular line. This means that one of the weight columns is redundant! Even given the option to cover the whole 2D space, the data below does not. It might as well not have this dimension, which is why we still do not consider the data below to span more than 1 dimension.\n<center><img src = \"images/dataset3.png\" width=\"400vw\"></center>\nWhat happens when there are outliers?",
        "Retrieved Video": "Yelp Rating\nStar ratings are often treat\nbey Gonzalez Phe,\nQuantitative continuous\nQualitative ordinal\nMind Coffee\nIssues with both interpretations:\nNot all differences are the same\n..\n*\nPredictive modeling often easier in\n4.7 (93 reviews)\nquantitative continuous\nClaimed . $$ . Coffee & Tea, Coffee Roasteries\nQuantitative Discrete/Cont.\nQualitative Ordinal Visualization\nVisualization\n5 stars\nOverall rating\n4 stars\n*\n*\n3 stars\n93 reviews\n2 stars\n1 star\n6\n2024-09-17 11:16:45\n\nYelp Rating\nStar ratings are often treat\nbey Gonzalez Phe,\nQuantitative continuous\nQualitative ordinal\nMind Coffee\nIssues with both interpretations:\nNot all differences are the same\n..\n*\nPredictive modeling often easier in\n4.7 (93 reviews)\nquantitative continuous\nClaimed . $$ . Coffee & Tea, Coffee Roasteries\nQuantitative Discrete/Cont.\nQualitative Ordinal Visualization\nVisualization\n5 stars\nOverall rating\n4 stars\n*\n*\n3 stars\n93 reviews\n2 stars\n1 star\n6\n2024-09-17 11:16:45\n\nActive poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n67%\nQuantitative - Discrete\n33%\nJoin at\nQualitative - Nominal\n0%\nslido.com\n#3599 224\nQualitative - Ordinal\n0%\n2024-09-17 11:14:50\n",
        "Question": "I still dont understand why yelp reviews are continuous? It's not like you can select 1.2423 stars? It's discrete as it's 1-5 whole stars or maybe half stars? ",
        "Timestamp": 516,
        "TA Response": "Great question! It depends on the context in which you are viewing it. When you assign Yelp star reviews, you are correct that you can only choose discrete whole or half star ratings. However, it is common to see that something has, say, a 4.7 star rating on Yelp, as the average of the reviews make sense as continuous variables. Also, the reason it is not discrete quantitative is because the \"meaning\" of different star ratings is not quite discrete. For example, the difference in satisfaction between 3 and 4 stars tends to be smaller than the difference between 4 and 5 stars.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "Yes, there was a poll about the type of variable a Yelp Rating (1 to 5 stars) is. The options included Quantitative - Continuous, Quantitative - Discrete, Qualitative - Ordinal, and Qualitative - Nominal.",
        "Recent Audio": "nesting records when you're working with these complex data types, finding records inside of records and maybe expanding them into more fine grained things. We talked about granularity. We're talking about referencing data, referencing other data. So you have lots of tables. You often need to join across those tables. When emerge when we need to get external data? We just wrapped up talking about fields. What are the columns? What do they represent? The various types? OK, so both how they're encoded and the type of data that is in that color. All right, so I want to wrap up the end of this EDA lecture. I talked about scope and temporality. You're a bit quicker. So scope, which we'll talk more about with sampling is what does the data reflect relative to the population I'm thinking about. So I'm interested in this population here. My data maybe looks like this. That's a pretty common case where sometimes have parts of my data that I don't want. Maybe I want to filter this out and then some parts of the data I do want to reflect the thing I'm trying to study. Pretty common when you're doing EDA. Trying to figure out what your data looks like relative to the population is a real problem. You know in an ideal world you get something like this. You have everyone, but you're interested in only a very small subset, everyone. It's inside of your data, but that's pretty rare where you have everything you possibly want.",
        "Recent Video": "Scope\nWill my data be enough to answer my question?\nJoey Gonzalez Phe, h ..\nExample: I am interested in studying crime in California\nbut I only have Berkeley crime data.\nNeed to\nNeed more\nFilter\ndata\nSolution: collect more data/change research question\nData\nIs my data too broad?\nExample: I am interested in student grades for Data100\nbut have student grades for all Data Science classes.\nNeed to\nSolution: Filtering = Implications on sample?\nFilter\nPopulation\no If the data is a sample I may have poor coverage\nafter filtering (More on this next week)\nData\nDoes my data cover the right time frame?\n\"Scope\" questions are defined by\n\u00b7 Which brings us to Temporality\nyour question/problem and inform\nif you need better-scoped data.\nCh\n2024-09-17 11:18:45\n\nScope\nWill my data be enough to answer my question?\nJoey Gonzalez Phe, h ..\nExample: I am interested in studying crime in California\nbut I only have Berkeley crime data.\nNeed to\nNeed more\nFilter\ndata\nSolution: collect more data/change research question\nData\nIs my data too broad?\nExample: I am interested in student grades for Data100\nbut have student grades for all Data Science classes.\nNeed to\nSolution: Filtering = Implications on sample?\nFilter\nPopulation\no If the data is a sample I may have poor coverage\nafter filtering (More on this next week)\nData\nDoes my data cover the right time frame?\n\"Scope\" questions are defined by\n\u00b7 Which brings us to Temporality\nyour question/problem and inform\nif you need better-scoped data.\n9\n2024-09-17 11:18:50\n",
        "Retrieved Audio": "This was last week's poll. Let's do it again just to see Build in. OK, we got we got the right answers. Yelp star rating.\nFirst year or second year? Third year?\nAll right, so you're voting. I'm going to talk about it because we're behind Continue voting. There isn't really a concrete right answer to this. It could be a couple of things. If we're really digging into what it means to be a star, five stars, 4 stars, three stars. They have very different meanings. Isn't like 4 is a little bit less than five or three is a little bit less than 4? Some people are like 4:00 and 5:00 is a lot. And then, you know, 3 is I did not like this restaurant at all.",
        "Retrieved Notes": "**\"No\"**, then the surveyor knows the **individual didn't cheat**. We assume the individual is comfortable revealing this information. \nGenerally, we can assume that the coin lands heads 50% of the time, masking the remaining 50% of the \"No\" answers. We can therefore **double** the proportion of \"No\" answers to estimate the **true** fraction of \"No\" answers.\n**Election Polls**\nToday, the *Gallup Poll* is one of the leading polls for election results. The many sources of biases -- who responds to polls? Do v\ny had a dismal response rate (about 24\\%); who knows how the other non-respondents would have polled? The *Digest* folded just 18 months after this disaster.\nAt the same time, George Gallup, a rising statistician, also made predictions about the 1936 elections. Despite having a smaller sample size of \u00e2\u0080\u009conly\u00e2\u0080\u009d 50,000 (this is still more than necessary; more when we cover the Central Limit Theorem), his estimate that 56\\% of voters would choose Roosevelt was much closer to the actual result (61\\%). Gallup\noters tell the truth? How can we predict turnout? -- still remain, but the *Gallup Poll* uses several tactics to mitigate them. Within their sampling frame of \"civilian, non-institutionalized population\u00e2\u0080\u009d of adults in telephone households in continental U.S., they use random digit dialing to include both listed/unlisted phone numbers and to avoid selection bias. Additionally, they use a within-household selection process to randomly select households with one or more adults. If no one answers, re-call mul",
        "Retrieved Video": "Active poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n67%\nQuantitative - Discrete\n33%\nJoin at\nQualitative - Nominal\n0%\nslido.com\n#3599 224\nQualitative - Ordinal\n0%\n2024-09-17 11:14:50\n\nActive poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n59%\nQuantitative - Discrete\n24%\nJoin at\nQualitative - Ordinal\n14%\nslido.com\n#3599 224\nQualitative - Nominal\n4%\n2024-09-17 11:14:55\n\nActive poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n59%\nQuantitative - Discrete\n24%\nJoin at\nQualitative - Ordinal\n14%\nslido.com\n#3599 224\nQualitative - Nominal\n4%\n2024-09-17 11:14:55\n",
        "Question": "Did I miss a poll yet?",
        "Timestamp": 554,
        "TA Response": "yes there was yelp star",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "The poll asked about the type of variable a Yelp Rating (1 to 5 stars) is. The correct answer is \"Qualitative - Ordinal\" because Yelp ratings represent a ranked order where the difference between the numbers is not necessarily uniform, reflecting a qualitative assessment rather than a precise quantitative measure.",
        "Recent Audio": "that the data I'm dropping is a large fraction of my data. And it could be that my sample is biased. It only took this little corner of the population. And that's something I have to deal about or deal with when I think about my sampling process. So come back to scope and talk about sampling. But an EDA you're trying to understand what do I have and how to reflect the population I'm trying to study. A big part of scope. Is the position in time. Unfortunately, in this class we don't actually spend enough time on time but dealing with data. Often we're dealing with a what would seem like a snapshot in time, but it's not. We take a survey of students to begin this semester. You can answer that survey anytime at the beginning of the semester. Your opinions might change. Big events in the news could happen to change how you look at the world. So my data is often not a snapshot in time, but some measurement across time. There's often dates and that I have to think about that date. The dates there's periodicity and data time is cyclic. We have days, hours in a day have different meanings. Days of the week have different meanings. Have to deal with the time in the place where it's located and and the periodicity of that data. You often have time and date fields in your data. What do they really mean? Is it when the event happened like Patient?",
        "Recent Video": "Temporality\n-Data changes - when was the data collected/last updated?\nHey Gonzalez Phe, h.\nPeriodicity - Is there periodicity? Diurnal (24-hr) patterns?\nWhat is the meaning of the time and date fields? A few options:\nWhen the \"event\" happened?\n.\nWhen the data was collected or was entered into the system?\n..\nDate the data was copied into a database? (look for many matching timestamps)\n10\n2024-09-17 11:20:36\n\nTemporality\n-Data changes - when was the data collected/last updated?\nGey Gonzalez Phe, h ...\nPeriodicity - Is there periodicity? Diurnal (24-hr) patterns?\nWhat is the meaning of the time and date fields? A few options:\nWhen the \"event\" happened?\n.\nWhen the data was collected or was entered into the system?\nDate the data was copied into a database? (look for many matching timestamps)\n10\n2024-09-17 11:20:41\n",
        "Retrieved Audio": "This was last week's poll. Let's do it again just to see Build in. OK, we got we got the right answers. Yelp star rating.\nAll right, so you're voting. I'm going to talk about it because we're behind Continue voting. There isn't really a concrete right answer to this. It could be a couple of things. If we're really digging into what it means to be a star, five stars, 4 stars, three stars. They have very different meanings. Isn't like 4 is a little bit less than five or three is a little bit less than 4? Some people are like 4:00 and 5:00 is a lot. And then, you know, 3 is I did not like this restaurant at all.\nThe nominal.",
        "Retrieved Notes": "y had a dismal response rate (about 24\\%); who knows how the other non-respondents would have polled? The *Digest* folded just 18 months after this disaster.\nAt the same time, George Gallup, a rising statistician, also made predictions about the 1936 elections. Despite having a smaller sample size of \u00e2\u0080\u009conly\u00e2\u0080\u009d 50,000 (this is still more than necessary; more when we cover the Central Limit Theorem), his estimate that 56\\% of voters would choose Roosevelt was much closer to the actual result (61\\%). Gallup\n**\"No\"**, then the surveyor knows the **individual didn't cheat**. We assume the individual is comfortable revealing this information. \nGenerally, we can assume that the coin lands heads 50% of the time, masking the remaining 50% of the \"No\" answers. We can therefore **double** the proportion of \"No\" answers to estimate the **true** fraction of \"No\" answers.\n**Election Polls**\nToday, the *Gallup Poll* is one of the leading polls for election results. The many sources of biases -- who responds to polls? Do v\noters tell the truth? How can we predict turnout? -- still remain, but the *Gallup Poll* uses several tactics to mitigate them. Within their sampling frame of \"civilian, non-institutionalized population\u00e2\u0080\u009d of adults in telephone households in continental U.S., they use random digit dialing to include both listed/unlisted phone numbers and to avoid selection bias. Additionally, they use a within-household selection process to randomly select households with one or more adults. If no one answers, re-call mul",
        "Retrieved Video": "Active poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n67%\nQuantitative - Discrete\n33%\nJoin at\nQualitative - Nominal\n0%\nslido.com\n#3599 224\nQualitative - Ordinal\n0%\n2024-09-17 11:14:50\n\nActive poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n59%\nQuantitative - Discrete\n24%\nJoin at\nQualitative - Ordinal\n14%\nslido.com\n#3599 224\nQualitative - Nominal\n4%\n2024-09-17 11:14:55\n\nActive poll\nSynchronous\nWhat type of variable is a Yelp Rating (1 to 5 stars)?\nHey Gonzalez Phe, h ...\nQuantitative - Continuous\n59%\nQuantitative - Discrete\n24%\nJoin at\nQualitative - Ordinal\n14%\nslido.com\n#3599 224\nQualitative - Nominal\n4%\n2024-09-17 11:14:55\n",
        "Question": "What was the right answer to the poll?",
        "Timestamp": 650,
        "TA Response": "You could make an argument for qualitative ordinal or quantitative continuous.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "The `.str.<string_operation>()` method in `pandas` is specifically designed to be used with `Series` objects, not entire `DataFrame`s. This method allows you to apply a string operation to every string contained in a `Series`. If you want to apply a string operation to multiple columns in a `DataFrame`, you would need to apply the `.str.<string_operation>()` method to each column individually.",
        "Recent Audio": "your own as well. But in the demo, we'll, we'll talk about how to go from this and this to some common representation and join the two tables. She I will highlight from that demo the code here. Let's do that real quickly. So a common pattern in in writing these long string operations again is to use these parentheses. I have my data frame and I'm going to do a sequence of string operations one at a time. So first I convert everything to lower case. Now everything is lower case, I replace all the spaces with nothing. Quote a string that contains nothing. That is deleting all the spaces, so removing the spaces. Then replace all the ends with and. So now I don't have any ampersands anymore, just Ant give all the punctuation. No get rid of all the periods by replacing that with nothing. The way of deleting the punctuation. I don't want the word county or parish as well, so I delete those, place them with nothing. I will confess that most of what I do is string manipulation looks like this. It's pretty easy to read. It's a sequence of transformations of applying to all the strings one step at a time till I get to a string. It looks kind of like this, which is not amazingly readable, but is now consistent across all the different ways that it could be written. Yeah. So instead of Saint John's having a period sometimes, sometimes not having a period, I got.",
        "Recent Video": "Demo 1: Canonicalization\nCounty State\n0\nDe Witt County\nHey Gonzalez Phe, h ...\n1\nLac qui Parle County\nMN\nCounty State Population\n2\nLewis and Clark County\nMT\n0\ndewitt\nIL\n16798\n3 St John the Baptist Parish\nLA\n1\nlacquiparle\nMN\n8067\nCounty Population\n2\nlewisandclark\nMT\n55716\nDeWitt\n16798\n3 stjohnthebaptist\nLS\n43044\n1\nLac Qui Parle\n8002\n2\nLewis & Clark\n55716\n3 St. John the Baptist\n43044\ndef canonicalize_county(county_series) :\nreturn (county_series\nDemo\nstr. lower ()\n# lowercase\nstr. replace(' ', ')\n# remove space\n.str. replace('&', 'and' )\n# replace &\n.str. replace('g', __ )\n# remove dot\n.str. replace( 'county',\n. str. replace('parish'\n2024-09-17 11:40:26\n\nDemo 1: Canonicalization\nCounty\nState\n0\nDe Witt County\nHey Gonzalez Phe, h.\n1\nLac qui Parle County\nMN\nCounty State Population\n2\nLewis and Clark County\nMT\n0\ndewitt\nIL\n16798\n3 St John the Baptist Parish\nLA\n1\nlacquiparle\nMN\n8067\nCounty Population\n2\nlewisandclark\nMT\n55716\nDeWitt\n16798\n3 stjohnthebaptist\nLS\n43044\n1\nLac Qui Parle\n8002\n2\nLewis & Clark\n55716\n3 St. John the Baptist\n43044\ndef canonicalize_county(county_series) :\nreturn (county_series\nDemo\nstr. lower ()\n# lowercase\nstr. replace(' ', '')\n# remove space\nstr . replace('&', 'and')\n# replace &\n. str. replace('.',\"\n-\n# remove dot\n.str . replace( 'county'\n.str. replace(\"parish',\n2024-09-17 11:40:36\n",
        "Retrieved Audio": "It's the STR operator and you can take any series. You have a series object, so any column single column that contains strings and do dot STR and then apply a string operation to all the entries in that column at once.\nSouth, I can take the length of a string, right? So the standard Python operations you could. And often you know, when you're first trying pandas, you could write a function, apply it to each row using string operations. That would work, but it'd be slow.\nBut in the demo, we'll, we'll talk about how to go from this and this to some common representation and join the two tables. She I will highlight from that demo the code here. Let's do that real quickly. So a common pattern in in writing these long string operations again is to use these parentheses. I have my data frame and I'm going to do a sequence of string operations one at a time. So first I convert everything to lower case.",
        "Retrieved Notes": "ing operations supported by Python and `pandas`. The Python functions operate on a single string, while their equivalent in `pandas` are  **vectorized** \u00e2\u0080\u0094 they operate on a `Series` of string data.\n+-----------------------+-----------------+---------------------------+\n| Operation             | Python          | `Pandas` (`Series`)       |\n+=======================+=================+===========================+\n| Transformation        | - `s.lower()`   | - `ser.str.lower()`       |\n|                      \nt-note collapse=\"false\"}\n## Learning Outcomes\n- Understand Python string manipulation, `pandas` `Series` methods\n- Parse and create regex, with a reference table\n- Use vocabulary (closure, metacharacters, groups, etc.) to describe regex metacharacters\n:::\n## Why Work with Text?\nLast lecture, we learned of the difference between quantitative and qualitative variable types. The latter includes string data \u00e2\u0080\u0094 the primary focus of lecture 6. In this note, we'll discuss the necessary tools to manipulate text: \nin the data science community as the industry- and academia-standard tool for manipulating tabular data (as well as the inspiration for Petey, our panda bear mascot).\nUsing `pandas`, we can\n- Arrange data in a tabular format.\n- Extract useful information filtered by specific conditions.\n- Operate on data to gain new insights.\n- Apply `NumPy` functions to our data (our friends from Data 8).\n- Perform vectorized computations to speed up our analysis (Lab 1).\n## `Series`, `DataFrame`s, and Indices\nTo begin our",
        "Retrieved Video": "str Methods\nFortunately, pandas offers a method of vectorizing text operations: the . str operato\nJoey Gonzalez Phe, h ...\nSeries . str. < string_operation>()\nApply the function <string_operation> to every string contained in the Series\n25\n2024-09-17 11:37:57\n\nstr Methods\nFortunately, pandas offers a method of vectorizing text operations: the . str operato\nJoey Gonzalez Phe, h.\nSeries.str. < string_operation>()\nApply the function <string_operation> to every string contained in the Series\n25\n2024-09-17 11:37:53\n\nstr Methods\nFortunately, pandas offers a method of vectorizing text operations: the . str operato\nSeries. str. < string_operation>()\nApply the function <string_operation> to every string contained in the Series\npopulations [\"County\"] . str . lower()\npopulations[\"County\"] . str. replace( '&', 'and')\ndewitt\nDeWitt\n1\nlac qui parle\n1\nLac Qui Parle\n2\nlewis & clark\n2\nLewis and Clark\n3\nst. john the baptist\n3\nSt. John the Baptist\nName: County, dtype: object\nName: County, dtype: object\n25\n2024-09-17 11:38:21\n",
        "Question": "can you apply .str.stringoperation to both datasets and series",
        "Timestamp": 1853,
        "TA Response": "You can use .str.<stringoperation> only on Series objects.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "In the context of the regex pattern `AB*A`, the star (`*`) applies to the character `B`, meaning \"zero or more occurrences of B.\" Therefore, the pattern matches strings that start with an `A`, followed by zero or more `B`s, and must end with an `A`. For example, it matches `AA`, `ABA`, `ABBA`, etc. The pattern does not mean zero or more `A`s; it specifically requires the string to start and end with `A`, with any number of `B`s in between.",
        "Recent Audio": "do. Kind of come back to where it departs as well. I put parentheses around AB and then a star here that says this whole thing matches zero or more times so this. This pattern right here matches just a because it's just a here and zero of these things it matches. ABA. It also matches Ababa and as many ABS as I want, followed by and there must be a terminal. A question so far. Surprised. Keep going. Alright, these are called meta characters. They're part of our programming programming languages. These are just the characters in that language. A&B, CD123, All those are just basic characters. These things here are their special characters. What if I want to match A star? Use another character, which we'll learn about a little bit. Put a slash beside it. Now that's not a meta character, that's just a star in a string. Keep going, we'll come back then. All right, so we've introduced 4 operations. It's important to think about the precedence these operations. So grouping parentheses has the highest precedence. So this means that the star applies to everything here. So again, this matches A or any number of A/B, A/B, S The star doesn't apply to just the B, it applies to both the A&B. The star has a next order of preference, so it applies to whatever is immediately next to it. That's higher precedence than things like concatenation. So this is A and then zero more copies of B followed by an A.",
        "Recent Video": "Regex Basics\nThere are four basic operations in regex.\nJoey Gonzalez Phe, h ..\nConcatenation - \"look for consecutive characters\"\n1 - \"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n* - \"zero or more\"\n() - \"consider a group\"\nAB*A matches AA, ABA, ABBA, ...\n\u20b1(AB) *A matches A, ABA, ABABA, ...\nA(A|B)AAB matches AAAAB or ABAAB\n*. ( ), and |_are called metacharacters - they represent an operation, rather than a literal text character\n36\n2024-09-17 11:50:07\n\nSummary So Far\nJoey Gonzalez De, h ...\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\n(consecutive chars)\n3\nAABAAB\nAABAAB\nevery other string\nor, |\n4\nAA | BAAB\nAA\nBAAB\nevery other string\n*\nAA\n(zero or more)\n2\nAB*A\nAB\nABBBBBBA\nABABA\nA(A|B)AAB\nAAAAB\nABAAB\nevery other string\ngroup\n(parenthesis)\n1\n(AB) *A\nA\nA\nABABABABA\nABBA\nThe regex order of operations. Grouping is evaluated first.\n37\n2024-09-17 11:50:31\n",
        "Retrieved Audio": "AB star a matches zero or more occurrences of the thing before.\nKind of come back to where it departs as well. I put parentheses around AB and then a star here that says this whole thing matches zero or more times so this.\nSo again, this matches A or any number of A/B, A/B, S The star doesn't apply to just the B, it applies to both the A&B.",
        "Retrieved Notes": "ase might contain information about tea varieties and boba toppings. The fact table would be used to link this information across the various dimension tables.\n<div style=\"text-align: center;\">\n<img src=\"images/multidimensional.png\" alt='multidimensional' width='850'>\n</div> \nIf we explicitly mark the relationships between tables, we start to see the star-like structure of the star schema.\n<div style=\"text-align: center;\">\n<img src=\"images/star.png\" alt='star' width='650'>\n</div> \nTo join data across multip\nster.\nConsider what the highest possible value of $S$ is and how that value can occur. The highest possible value of $S$ is 1, which happens if every point in $X$'s cluster is right on top of $X$; the average distance to other points in $X$'s cluster is $0$, so $A = 0$. Thus, $S = \\frac{B}{\\max(0, B)} = \\frac{B}{B} = 1$. Another case where $S = 1$ could happen is if $B$ is *much* greater than $A$ (we denote this as $B >> A$).\nCan $S$ be negative? The answer is yes. If the average distance to X\u00e2\u0080\u0099s clusterm\nr />         |\n| (zero or more)        |                 |                | ABBBBBBA    | ABABA             |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Group`: `()` <br />  | 1               | A(A|B)AAB      | AAAAB       | every other string|\n| (parenthesis)         |                 | <br />         | ABAAB <br />| <br />            |\n|                       |                 | <br />         | <br />      | <br />            |\n|                     ",
        "Retrieved Video": "ST\nMasters Knowledge\nQuest Sale ends\nZero or one of a a?\n$100 OFF\nsoon! Accelerate\nfrom mid-level 60\nZero or more of a at\nsenior developer.\n111\nOne or more of a as\n2024-09-17 11:48:41\n\nST\nMasters Knowledge\nQuest Sale ends\nZero or one of a a?\n$100 OFF\nsoon! Accelerate\nfrom mid-level 60\nZero or more of a at\nsenior developer.\n111\nOne or more of a as\n2024-09-17 11:48:41\n\nRegex Basics\nThere are four basic operations in regex.\njoey Gonzalez Phe, N.\nConcatenation - \"look for consecutive characters\"\n\u203a 1-\"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n*\n\"zero or more\"\nAB*A matches AA, ABA, ABBA, ...\n36\n2024-09-17 11:48:26\n",
        "Question": "what exactly does star mean by zero or more? for AB*A, AB zero or more As? does it mean must end with A? Not sure what it means",
        "Timestamp": 2466,
        "TA Response": "It means zero or more of whatever came directly before it. So in this case it means zero or more B's. It will match anything that starts with A and ends with A, with zero or more B's between them. (Like AA, ABA, ABBBBBA, etc.)",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "The expression `AA | BAAB` uses the \"or\" operator (`|`), which means it matches either `AA` or `BAAB`, but not both simultaneously. Therefore, \"AABAAB\" would not match as a whole to \"AA\", \"BAAB\", and another \"AA\" using this expression. Instead, it would match either the first \"AA\" or \"BAAB\" separately, depending on how the regex engine processes the input.",
        "Recent Audio": "They're part of our programming programming languages. These are just the characters in that language. A&B, CD123, All those are just basic characters. These things here are their special characters. What if I want to match A star? Use another character, which we'll learn about a little bit. Put a slash beside it. Now that's not a meta character, that's just a star in a string. Keep going, we'll come back then. All right, so we've introduced 4 operations. It's important to think about the precedence these operations. So grouping parentheses has the highest precedence. So this means that the star applies to everything here. So again, this matches A or any number of A/B, A/B, S The star doesn't apply to just the B, it applies to both the A&B. The star has a next order of preference, so it applies to whatever is immediately next to it. That's higher precedence than things like concatenation. So this is A and then zero more copies of B followed by an A. We do need parentheses if I want to have AB this whole thing copied multiple times. The Oregon. Make sure student condition concatenation has the next preference. This is 3 the order of precedence. So concatenation comes before the OR, which means the OR applies to all the stuff on the left and the right, not just the immediate characters. Let's do a poll and see how people are doing. So which regular expression pattern will match the string ABBA select all that apply? Boat.",
        "Recent Video": "Summary So Far\nJoey Gonzalez Phe, h ...\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\nevery other string\n(consecutive chars)\nAABAAB\nAABAAB\nTw\nor, |\n4\nAALBAAB\nAA\nBAAB\nevery other string\n*\n(zero or more)\n2\nAB*A\nAA\nAB\nABBBBBBA\nABABA\nA(A|B)AAB\nAAAAB\ngroup\nABAAB\nevery other string\n(parenthesis)\n1\n(AB) *A\nA\nAA\nABABABABA\nABBA\nThe regex order of operations. Grouping is evaluated first.\n37\n2024-09-17 11:51:33\n\nActive poll\nSynchronous\nWhich regex pattern wey Gonzalez The, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\n. AABAAB\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\nAABAAS\nAABAAB\nevery other string\n\u00b7 AA|BAAB\n4\nAA |BAAB\nRAA\nevery other string\n(bero or more)\n2\nAB\nJoin at\nABBESEDA\nARABA\n\u00b7 AB*A\nA[A[B)AAB\nAJAAR\nevery other string\ngroup\nABAAD\nslido.com\n(AB)\"A\nAA\nARABABARA\n\u00b7 (AB)*A\n#3599 224\n2024-09-17 11:51:53\n",
        "Retrieved Audio": "So which regular expression pattern will match the string ABBA select all that apply?\nConcatenation. This one's the probably the easiest. You can write a sequence of characters like a ABAAB and that will match exactly that sequence of characters where you saw that with cat. So a A/B A/B will match any string that looks like that.\nThis pattern right here matches just a because it's just a here and zero of these things. It matches ABA. It also matches Ababa and as many ABS as I want, followed by and there must be a terminal.",
        "Retrieved Notes": "                | BAAB        |                   |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Concatenation`       | 3               | AABAAB         | AABAAB      | every other string|\n|                       |                 |                |             |                   |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Closure`: `*` <br /> | 2               | AB*A           | AA          | AB <b\n  |                 | <br />         | <br />      | <br />            |\n|                       |                 | (AB)*A         | A <br />    | AA <br />         |\n|                       |                 |                | ABABABABA   | ABBA              |\n+-----------------------+-----------------+----------------+-------------+-------------------+\nNotice how these metacharacter operations are ordered. Rather than being literal characters, these **metacharacters** manipulate adjacent characters. `()`\nr />         |\n| (zero or more)        |                 |                | ABBBBBBA    | ABABA             |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Group`: `()` <br />  | 1               | A(A|B)AAB      | AAAAB       | every other string|\n| (parenthesis)         |                 | <br />         | ABAAB <br />| <br />            |\n|                       |                 | <br />         | <br />      | <br />            |\n|                     ",
        "Retrieved Video": "Active poll\nSynchronous\nWhich regex pattern wey Gonzalez The, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\n. AABAAB\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\nAABAAS\nAABAAB\nevery other string\n\u00b7 AA|BAAB\n4\nAA |BAAB\nRAA\nevery other string\n(bero or more)\n2\nAB\nJoin at\nABBESEDA\nARABA\n\u00b7 AB*A\nA[A[B)AAB\nAJAAR\nevery other string\ngroup\nABAAD\nslido.com\n(AB)\"A\nAA\nARABABARA\n\u00b7 (AB)*A\n#3599 224\n2024-09-17 11:51:53\n\nActive poll\nSynchronous\nWhich regex pattern wey Gonzalez The, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\n. AABAAB\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\nAABAAS\nAABAAB\nevery other string\n\u00b7 AA|BAAB\n4\nAA |BAAB\nRAA\nevery other string\n(bero or more)\n2\nAB\nJoin at\nABBESEDA\nARABA\n\u00b7 AB*A\nA[A[B)AAB\nAJAAR\nevery other string\ngroup\nABAAD\nslido.com\n(AB)\"A\nAA\nARABABARA\n\u00b7 (AB)*A\n#3599 224\n2024-09-17 11:51:53\n\nRegex Basics\nThere are four basic operations in regex.\nwey Gonzalez Phe, N ..\nConcatenation - \"look for consecutive characters\"\n- |-\"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n36\n2024-09-17 11:48:02\n",
        "Question": "If the expression is AA | BAAB, would any match of BAAB have another match for the AA within BAAB? So would \"AABAAB\" match to \"AA\", \"BAAB\", and another \"AA\"? ",
        "Timestamp": 2564,
        "TA Response": "Not quite, for the expression you provided, only one instance of \"AA\" and \"BAAB\" would match. The substrings within them would not match. ",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "The order of operations in regex follows specific precedence rules. The star (*) operator, which denotes \"zero or more\" of the preceding element, has a higher precedence than concatenation. Concatenation, which looks for consecutive characters, comes before the OR (|) operator. Parentheses can be used to group parts of the regex to override these precedence rules and apply operators to the entire group.",
        "Recent Audio": "that the star applies to everything here. So again, this matches A or any number of A/B, A/B, S The star doesn't apply to just the B, it applies to both the A&B. The star has a next order of preference, so it applies to whatever is immediately next to it. That's higher precedence than things like concatenation. So this is A and then zero more copies of B followed by an A. We do need parentheses if I want to have AB this whole thing copied multiple times. The Oregon. Make sure student condition concatenation has the next preference. This is 3 the order of precedence. So concatenation comes before the OR, which means the OR applies to all the stuff on the left and the right, not just the immediate characters. Let's do a poll and see how people are doing. So which regular expression pattern will match the string ABBA select all that apply? Boat. Who thinks there's more than one? Find out. All right, you got this. This is tricky, so let's walk through these. AB star A What is that matching? A and remember the star attaches just to the B right order of operations, so that means A and then zero more BS followed by an A. So ABBA that that works. Let's look at the next one. Looks like it should work, but the parentheses say I'm going to have zero more copies of AB the whole group. Followed by name so it doesn't quite get ABBA. AABA A/B.",
        "Recent Video": "Active poll\nSynchronous\nWhich regex pattern wey Gonzalez /he, N.\nmatch the string \"ABBA\"?\nSelect all that apply.\nAB*AO\nOperation\nOrder\nExample\nMatches\nDoesn't match\n78%\nconcatenation\n3\nAABAAS\nAABAAB\nevery other string\n4\nAA |BAAB\nAB\n(AB)*A\nRAA\nevery other string\n24%\nAR*A\nAB\n(pero or more)\n2\nJoin at\nARABA\nA[A|B)AAB\nAAAAB\nevery other string\nslido.com\ngroup\nABAAD\nAA|BAAB\n(AR)\"A\nAA\nARABABARA\n15%\n#3599 224\nAABAAB\n12%\n2024-09-17 11:53:09\n\nActive poll\nSynchronous\nWhich regex pattern wey Gonzalez het, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\nAB*AO\nOperation\nOrder\nExample\nMatches\nDoesn't match\n82%\nconcatenation\nAABAAS\nAABAAB\nevery other string\n4\nAA |BAAB\nRAA\nevery other string\n(AB)*A\n.\n19%\n(nero or more)\n2\nAR*A\nAB\nAR\nJoin at\nARBEOBRA\nARABA\nA[A]B)AAB\nAAAAB\nABAAD\nevery other string\nslido.com\ngroup\nAABAAB\n(parenthesis)\n(AB)*A\nAA\nARABABARA\nABBA\n11%\n#3599 224\nAA|BAAB\n11%\n2024-09-17 11:53:29\n",
        "Retrieved Audio": "So which regular expression pattern will match the string ABBA select all that apply?\nSo this is regex or regex. So regular expression Reg X is how it's shortened. Is a tiny programming language. Allows you to search strings for patterns, so there's something really simple.\nAll right. The first four basic operation operations of a regular expression.",
        "Retrieved Notes": "                                               |                 | 55             |                  |\n|                                                |                 |                |                  | \n+------------------------------------------------+-----------------+----------------+------------------+\n### Greediness\nIn order to fully understand the last operation in the table, we have to discuss greediness. RegEx is greedy \u00e2\u0080\u0093 it will look for the longest possible match in a string. To motivate \nthis with an example, consider the pattern `<div>.*</div>`. In the sentence below, we would hope that the bolded portions would be matched:\n\"This is a **\\<div>example\\</div>** of greediness **\\<div>in\\</div>** regular expressions.\"\nHowever, in reality, RegEx captures far more of the sentence. The way RegEx processes the text given that pattern is as follows:\n1. \"Look for the exact string \\<\\div>\" \n2. Then, \u00e2\u0080\u009clook for any character 0 or more times\" \n3. Then, \u00e2\u0080\u009clook for the exact string \\</div>\"\nThe resul\nT to memorize regex. At a high level, we want you to:\n1. Understand what regex is capable of\n2. Parse and create regex, given a reference table -->\nThere are a ton of resources to learn and experiment with regular expressions. A few are provided below:\n- [Official Regex Guide](https://docs.python.org/3/howto/regex.html)\n- [Data 100 Reference Sheet](https://ds100.org/sp22/resources/assets/hw/regex_reference.pdf) \n- [Regex101.com](https://regex101.com/)\n    - Be sure to check Python under the category on the ",
        "Retrieved Video": "Regex Basics\nThere are four basic operations in regex.\nHey Gonzalez Phe, h ...\nConcatenation - \"look for consecutive characters\"\nAABAAB matches AABAAB\n36\n2024-09-17 11:47:33\n\nRegex Basics\nThere are four basic operations in regex.\nJoey Gonzalez Phe, I ....\nConcatenation - \"look for consecutive characters\"\n| - \"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n* - \"zero or more\"\n() - \"consider a group\"\nAB*A matches AA, ABA, ABBA, ...\n\u20b1(AB)*A matches A, ABA, ABABA, ...\nA(A|B)AAB matches AAAAB or ABAAB\n36\n2024-09-17 11:49:24\n\nRegex Basics\nThere are four basic operations in regex.\nJoey Gonzalez Phe, I ....\nConcatenation - \"look for consecutive characters\"\n| - \"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n* - \"zero or more\"\n() - \"consider a group\"\nAB*A matches AA, ABA, ABBA, ...\n\u20b1(AB)*A matches A, ABA, ABABA, ...\nA(A|B)AAB matches AAAAB or ABAAB\n36\n2024-09-17 11:49:24\n",
        "Question": "how do you find the order of a regex value?",
        "Timestamp": 2629,
        "TA Response": "Order is not calculated, rather you can think of it like an order of operations for regex operators. Since group has order 1, is is evaluated before the other operations.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "No, the pattern `AB*A` does not require continuous As or Bs. The `*` operator applies only to the character immediately before it, which is `B` in this case. This means the pattern matches an `A` followed by zero or more `B`s, and then another `A`. So, it can match strings like \"AA\", \"ABA\", \"ABBA\", etc., where the number of `B`s can vary.",
        "Recent Audio": "3 the order of precedence. So concatenation comes before the OR, which means the OR applies to all the stuff on the left and the right, not just the immediate characters. Let's do a poll and see how people are doing. So which regular expression pattern will match the string ABBA select all that apply? Boat. Who thinks there's more than one? Find out. All right, you got this. This is tricky, so let's walk through these. AB star A What is that matching? A and remember the star attaches just to the B right order of operations, so that means A and then zero more BS followed by an A. So ABBA that that works. Let's look at the next one. Looks like it should work, but the parentheses say I'm going to have zero more copies of AB the whole group. Followed by name so it doesn't quite get ABBA. AABA A/B. Doesn't match ABBA and it has to match exactly that stream. It only matches a ABA A/B, the last one A, A or BA A/B. AA doesn't match ABBA. And Baab does not match. ABBA. Questions here. The back, yeah. Yeah, let's do this with regular expression. All right. So we have. Bob, we'll make more a second. So we want to do AB star. A. So it doesn't match the whole thing because it's looking for the AB group, so the pair of characters must occur together zero or more times. This will match Ababa. It also matched just. A OK.",
        "Recent Video": "Active poll\nSynchronous\nWhich regex pattern wey Gonzalez het, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\nAB*AO\nOperation\nOrder\nExample\nMatches\nDoesn't match\n82%\nconcatenation\nAABAAS\nAABAAB\nevery other string\n4\nAA |BAAB\nRAA\nevery other string\n(AB)*A\n.\n19%\n(nero or more)\n2\nAR*A\nAB\nAR\nJoin at\nARBEOBRA\nARABA\nA[A]B)AAB\nAAAAB\nABAAD\nevery other string\nslido.com\ngroup\nAABAAB\n(parenthesis)\n(AB)*A\nAA\nARABABARA\nABBA\n11%\n#3599 224\nAA|BAAB\n11%\n2024-09-17 11:53:29\n\nregular expressions 101\n\u00a5 social\nSAVE & SHARE\nREGULAR EXPRESSION\nEXPLANATION\nSave new Regex\nir\"t cat\nJoey Gonzales Phe, h ..\nA\nAdd to Community Libr ....\nMATCH INFORMATION\nTEST STRING\n:\nFLAVOR\nThe. cat . in. the .hat\nQUICK REFERENCE\n(>> PCRE2 (PHP >=7.3)\nSearch reference\nA single char ... [abc]\nq> PCRE (PHP <7.3)\nAll Tokens\nA character .. [\"abc]\n(> ECMAScript (JavaScript)\n* Common Tokcens\nA character L .. [a-z]\n/ Python\n@ General Tokens\nA character .. [\"a-2]\nGolang\nAnchors\nA charac .. [a-zA-Z]\n4 java 8\nMeta Sequences\nAny single charact ... .\nq> NET 7.0 (Cm)\n( Quantifiers\nAlternate - mat .. alb\n45 Rust\n() Group Constructs\nAny whitespace ... \\s\nRegex Flavor Guide\n[] Character Classes\nAny non-whitesp ... \\$\nFUNCTION\nFlags/Modifiers\nAny digit\nAny non-digit\nSPONSORS\nX Substitution\nAny word charac ... \\\nThere are currently no sponsors.\nBecome a sponsor today!\nAny non-word c .. \\M\nMacch eve ... (7 :... )\nThe Frontend\nCapture ever ... (. .. )\nQUEST\nMasters Knowledge\nQuest Sale ends\nZero or one of a a?\n$700 OFF\nsoon! Accelerate\nfrom mid-level to\nZero or more of a a*\nsenior developer.\n1:11\n2024-09-17 11:54:31\n",
        "Retrieved Audio": "So this matches A and no BS, A and one BA and two BS and so on.\nAB star A What is that matching?\nSo again, this matches A or any number of A/B, A/B, S The star doesn't apply to just the B, it applies to both the A&B.",
        "Retrieved Notes": "                | BAAB        |                   |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Concatenation`       | 3               | AABAAB         | AABAAB      | every other string|\n|                       |                 |                |             |                   |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Closure`: `*` <br /> | 2               | AB*A           | AA          | AB <b\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000::: {.callout-note collapse=\"false\"}\n## Learning Outcomes\n* Define a random variable in terms of its distribution\n* Compute the expectation and variance of a random variable\n* Gain familiarity with the Bernoulli and binomial random variables\n:::\nIn the past few lectures, we've examined the role of complexity in influencing model performance. We've considered model complexity in the context of \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0012\u0000c\u0000a\u0000s\u0000e\u0000_\u0000s\u0000t\u0000u\u0000d\u0000y\u0000_\u0000c\u0000l\u0000i\u0000m\u0000a\u0000t\u0000eIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000A\u0000\u0000\u0000.\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0000\u0000\u0000\u0000\u0000\u000e\u0000c\u0000a\u0000s\u0000e\u0000_\u0000s\u0000t\u0000u\u0000d\u0000y\u0000_\u0000H\u0000C\u0000EIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u00af\u0000\u0000\u0000.\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0000\u0000\u0000\u0000\u0000\n\u0000c\u0000l\u0000u\u0000s\u0000t\u0000e\u0000r\u0000i\u0000n\u0000gIlo",
        "Retrieved Video": "Active poll\nSynchronous\nWhich regex pattern wey Gonzalez The, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\n. AABAAB\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\nAABAAS\nAABAAB\nevery other string\n\u00b7 AA|BAAB\n4\nAA |BAAB\nRAA\nevery other string\n(bero or more)\n2\nAB\nJoin at\nABBESEDA\nARABA\n\u00b7 AB*A\nA[A[B)AAB\nAJAAR\nevery other string\ngroup\nABAAD\nslido.com\n(AB)\"A\nAA\nARABABARA\n\u00b7 (AB)*A\n#3599 224\n2024-09-17 11:51:53\n\nActive poll\nSynchronous\nWhich regex pattern wey Gonzalez The, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\n. AABAAB\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\nAABAAS\nAABAAB\nevery other string\n\u00b7 AA|BAAB\n4\nAA |BAAB\nRAA\nevery other string\n(bero or more)\n2\nAB\nJoin at\nABBESEDA\nARABA\n\u00b7 AB*A\nA[A[B)AAB\nAJAAR\nevery other string\ngroup\nABAAD\nslido.com\n(AB)\"A\nAA\nARABABARA\n\u00b7 (AB)*A\n#3599 224\n2024-09-17 11:51:53\n\nRegex Basics\nThere are four basic operations in regex.\njoey Gonzalez Phe, N.\nConcatenation - \"look for consecutive characters\"\n\u203a 1-\"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n*\n\"zero or more\"\nAB*A matches AA, ABA, ABBA, ...\n36\n2024-09-17 11:48:26\n",
        "Question": "So the AB*A has to be continuous As or BS to work?",
        "Timestamp": 2699,
        "TA Response": "AB*A would match anything that starts and ends with A, and has zero or more B's between them. The * indicates zero or more of whatever comes directly before it. So it would match AA, ABA, ABBBBBA, etc. ABBBABBBBA would not match.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "Yes, the regex pattern `ab*a` can match any sequence with zero or more 'b's between 'a's. It can match `aa` (zero 'b's), `aba` (one 'b'), `abba` (two 'b's), `abbba` (three 'b's), and so on. The `*` operator allows for zero or more occurrences of the preceding element, which in this case is 'b'.",
        "Recent Audio": "Bob, we'll make more a second. So we want to do AB star. A. So it doesn't match the whole thing because it's looking for the AB group, so the pair of characters must occur together zero or more times. This will match Ababa. It also matched just. A OK. All right, let's keep going. A more challenging one. Which patterns match? Moon expression should match any even number of OS except zero. Don't match MN or MOON the odd number of OS. This one's fun. Who's got it? Who doesn't got it? It's hard to get. This one's tricky. Think about it. I want an even number of votes, even number of pairs of votes, even number votes. And I must have at least two O's. Let's see. All right, many of you got it. What's half? You got it a little over half. This one's tricky. Let's let's first look at why the the bottom ones are wrong. So the very bottom one. Moo * N says match MO and then zero more OS, so Mon would be fine. Moon would be fine. MOOON would also be fine, you're not supposed to match that. Because that doesn't work. Because it matches something you didn't want to match. This is one of the challenging regular expressions. You're often looking for a thing that will get just what you want and not the things you don't. OK, we'll see you next one. Next one, says M, followed by zero more copies of this whole group OON.",
        "Recent Video": "Active poll\nSynchronous\nWhich pattern match wey Gonzalez De, h.\nmoon, moooon, etc? Your\nexpression should match any\n*even* number of \"o\"s except\nzero (i.e. don't match mn,\nOperation\nOrder\nExample\nMatches\nDoesn't match\nmooon).\nconcatenation\nAABAAS\nAABAAB\nevery other string\n[conoscuover churs)\n4\nAA |BAAB\nevery other string\nmoo(oo)*n\nRAA\n57%\n2\nAR*A\nJoin at\n(nero or more)\nARBEOBRA\nARABA\nA[A]B)AAB\nALAAR\nADAM\nevery other string\nslido.com\ngroup\nm(oo)*n\n(AR)\"A\n4\nAA\nABABABABA\nABRA\n35%\n#3599 224\nmoo*n\n8%\n2024-09-17 11:58:26\n\nActive poll\nSynchronous\nWhich pattern match wey Gonzalez Phe, h.\nmoon, moooon, etc? Your\nexpression should match any\n*even* number of \"o\"s except\nzero (i.e. don't match mn,\nOperation\nOrder\nExample\nMatches\nDoesn't match\nmooon).\nconcatenation\nAABAAS\nAABAAB\nevery other string\n4\nAA |BAAB\nAA\nevery other string\nmoo(oo)*n\n68%\n2\nAR\nJoin at\n(pero or more)\nARBEOBRA\nARABA\nA[A]B)AAB\nAAAAB\nevery other string\nslido.com\ngroup\nm(oo)*n\n(AB)\"A\nAA\nARABABARA\nABBA\n24%\n#3599 224\nmoo*n\n7%\n2024-09-17 11:56:45\n",
        "Retrieved Audio": "A. So it doesn't match the whole thing because it's looking for the AB group, so the pair of characters must occur together zero or more times. This will match Ababa.\nThis pattern right here matches just a because it's just a here and zero of these things. It matches ABA. It also matches Ababa and as many ABS as I want, followed by and there must be a terminal.\nSo which regular expression pattern will match the string ABBA select all that apply?",
        "Retrieved Notes": "                | BAAB        |                   |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Concatenation`       | 3               | AABAAB         | AABAAB      | every other string|\n|                       |                 |                |             |                   |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Closure`: `*` <br /> | 2               | AB*A           | AA          | AB <b\nr />         |\n| (zero or more)        |                 |                | ABBBBBBA    | ABABA             |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Group`: `()` <br />  | 1               | A(A|B)AAB      | AAAAB       | every other string|\n| (parenthesis)         |                 | <br />         | ABAAB <br />| <br />            |\n|                       |                 | <br />         | <br />      | <br />            |\n|                     \n----------------+\n| `Repeated \"a\" Times`: `{a}`<br />              | j[aeiou]{3}hn   | jaoehn <br />  | jhn <br />       |\n|                                                |                 | jooohn         | jaeiouhn         |\n+------------------------------------------------+-----------------+----------------+------------------+\n| `Repeated \"from a to b\" Times`: `{a, b}`<br /> | j[ou]{1,2}hn    | john <br />    | jhn <br />       | \n|                                                |                 | juoh",
        "Retrieved Video": "Active poll\nSynchronous\nWhich regex pattern wey Gonzalez The, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\n. AABAAB\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\nAABAAS\nAABAAB\nevery other string\n\u00b7 AA|BAAB\n4\nAA |BAAB\nRAA\nevery other string\n(bero or more)\n2\nAB\nJoin at\nABBESEDA\nARABA\n\u00b7 AB*A\nA[A[B)AAB\nAJAAR\nevery other string\ngroup\nABAAD\nslido.com\n(AB)\"A\nAA\nARABABARA\n\u00b7 (AB)*A\n#3599 224\n2024-09-17 11:51:53\n\nActive poll\nSynchronous\nWhich regex pattern wey Gonzalez The, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\n. AABAAB\nOperation\nOrder\nExample\nMatches\nDoesn't match\nconcatenation\nAABAAS\nAABAAB\nevery other string\n\u00b7 AA|BAAB\n4\nAA |BAAB\nRAA\nevery other string\n(bero or more)\n2\nAB\nJoin at\nABBESEDA\nARABA\n\u00b7 AB*A\nA[A[B)AAB\nAJAAR\nevery other string\ngroup\nABAAD\nslido.com\n(AB)\"A\nAA\nARABABARA\n\u00b7 (AB)*A\n#3599 224\n2024-09-17 11:51:53\n\nActive poll\nSynchronous\nWhich regex pattern wey Gonzalez het, h.\nmatch the string \"ABBA\"?\nSelect all that apply.\nAB*AO\nOperation\nOrder\nExample\nMatches\nDoesn't match\n82%\nconcatenation\nAABAAS\nAABAAB\nevery other string\n4\nAA |BAAB\nRAA\nevery other string\n(AB)*A\n.\n19%\n(nero or more)\n2\nAR*A\nAB\nAR\nJoin at\nARBEOBRA\nARABA\nA[A]B)AAB\nAAAAB\nABAAD\nevery other string\nslido.com\ngroup\nAABAAB\n(parenthesis)\n(AB)*A\nAA\nARABABARA\nABBA\n11%\n#3599 224\nAA|BAAB\n11%\n2024-09-17 11:53:29\n",
        "Question": "If you had ab*a, could it match any sequence with zero or more b\u2019s? Like it can match aa, or aba, could it also match abba, and abbba and so on?",
        "Timestamp": 2852,
        "TA Response": "Yes that's correct!",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "Yes, \"[abc]\" is equivalent to \"a | b | c\" in the sense that both patterns match a single character that can be either 'a', 'b', or 'c'. However, using \"[abc]\" is generally more concise and efficient for defining a character class, especially when dealing with a larger set of characters. The \"|\" operator is more useful when you need to match entire sequences or patterns rather than individual characters.",
        "Recent Audio": "and Capital Z. Or between little A and little Z. So this little range thing is a way of writing a range of of valid characters. So I could also do something like 09. I might actually be able to do something like :) to sad face, but I've never actually tried that because they're also valid characters. And what does it mean to be in the range of characters if I were to put these characters in alphabetical order or in the order of the Unicode character set all the characters between 0 and 9 inclusive. Which in the case of numbers is all the rest of the numbers. This is a way of building a character class. This whole thing only matches a single A, a single little A, a single B, or a single little B. So it's a way of defining a single character that could be any one of these things. Another example could be something like. ABC that matches the characters ABC and I can match that star zero more times. We'll see some examples in a moment. The plus character. This is like our *, but instead of it being zero more, it's one or more times. So AB plus matches AB, so there has to be at least one B, but it could be more than 1B as well. The question mark. Called the optional says that that character can occur 0 or one time. So A&B is optional. So a works and AB works and that's it.",
        "Recent Video": "Regex Expanded\nSix more regex operations.\nsey Gonzalez Phe, h ...\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n+ - \"one or more\"\n? - \"zero or one\" (\"optional\")\nAB+ matches AB, ABB, ABBB, ...\nAB? matches A, AB\n42\n2024-09-17 12:02:07\n\nRegex Expanded\nSix more regex operations.\nJoey Gonzalez Phe, N.\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n+ - \"one or more\"\n\"zero or one\" (\"optional\")\nAB+ matches AB, ABB, ABBB, ...\nAB? matches A, AB\n42\n2024-09-17 12:02:17\n",
        "Retrieved Audio": "Concatenation. This one's the probably the easiest. You can write a sequence of characters like a ABAAB and that will match exactly that sequence of characters where you saw that with cat. So a A/B A/B will match any string that looks like that.\nSo which regular expression pattern will match the string ABBA select all that apply?\nCalled the optional says that that character can occur 0 or one time. So A&B is optional.",
        "Retrieved Notes": "                | BAAB        |                   |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Concatenation`       | 3               | AABAAB         | AABAAB      | every other string|\n|                       |                 |                |             |                   |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Closure`: `*` <br /> | 2               | AB*A           | AA          | AB <b\n----------------+\n| `Repeated \"a\" Times`: `{a}`<br />              | j[aeiou]{3}hn   | jaoehn <br />  | jhn <br />       |\n|                                                |                 | jooohn         | jaeiouhn         |\n+------------------------------------------------+-----------------+----------------+------------------+\n| `Repeated \"from a to b\" Times`: `{a, b}`<br /> | j[ou]{1,2}hn    | john <br />    | jhn <br />       | \n|                                                |                 | juoh\nr />         |\n| (zero or more)        |                 |                | ABBBBBBA    | ABABA             |\n+-----------------------+-----------------+----------------+-------------+-------------------+\n| `Group`: `()` <br />  | 1               | A(A|B)AAB      | AAAAB       | every other string|\n| (parenthesis)         |                 | <br />         | ABAAB <br />| <br />            |\n|                       |                 | <br />         | <br />      | <br />            |\n|                     ",
        "Retrieved Video": "Regex Basics\nThere are four basic operations in regex.\nwey Gonzalez Phe, N ..\nConcatenation - \"look for consecutive characters\"\n- |-\"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n36\n2024-09-17 11:48:02\n\nRegex Basics\nThere are four basic operations in regex.\nwey Gonzalez Phe, N ..\nConcatenation - \"look for consecutive characters\"\n- |-\"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n36\n2024-09-17 11:48:02\n\nRegex Basics\nThere are four basic operations in regex.\nJoey Gonzalez Phe, I ....\nConcatenation - \"look for consecutive characters\"\n| - \"or\"\nAABAAB matches AABAAB\nAA | BAAB matches AA or BAAB\n* - \"zero or more\"\n() - \"consider a group\"\nAB*A matches AA, ABA, ABBA, ...\n\u20b1(AB)*A matches A, ABA, ABABA, ...\nA(A|B)AAB matches AAAAB or ABAAB\n36\n2024-09-17 11:49:24\n",
        "Question": "Is \"[abc]\" equivalent to \"a | b | c\"? If so, is there any reason to use one over the other?",
        "Timestamp": 3144,
        "TA Response": "Yes that's correct! But I would be careful with the spaces you put around the a, b, and c, as those might be included in the matching. So [abc] would be the same as a|b|c. Not really any reason to use one over the other, brackets are just helpful for character classes like [A-Z] without needing to write each character out.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "The \"?\" in regular expressions is used to indicate that the preceding character or group is optional, meaning it can appear zero or one time. For example, in the regex pattern \"AB?\", the \"B\" is optional, so it matches both \"A\" and \"AB\". This is equivalent to specifying a range of occurrences as \"{0,1}\".",
        "Recent Audio": "matches a single A, a single little A, a single B, or a single little B. So it's a way of defining a single character that could be any one of these things. Another example could be something like. ABC that matches the characters ABC and I can match that star zero more times. We'll see some examples in a moment. The plus character. This is like our *, but instead of it being zero more, it's one or more times. So AB plus matches AB, so there has to be at least one B, but it could be more than 1B as well. The question mark. Called the optional says that that character can occur 0 or one time. So A&B is optional. So a works and AB works and that's it. Almost there. Squiggly brackets Squiggly brackets says. Whatever is before me. Repeated exactly X times and it's the immediate character. Same kind of precedence as all of these operations. Right, so in this case it's saying I match an A and AB repeated twice. So it's equivalent to just saying. ABB. Exact same thing, but you can get fancier. You say a range, so when A followed by zero to two B's. So this matches AAB and ABB. OTT. There is some redundancy in regular expressions and that the star is exactly equivalent to this thing. You can do 0 comma, so zero or more times plus is equivalent to one comma. One or more times the question mark is equivalent to 01.",
        "Recent Video": "Regex Expanded\nSix more regex operations.\nGey Gonzalez Phe, h.\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n+ - \"one or more\"\n? - \"zero or one\" (\"optional\")\nAB+ matches AB, ABB, ABBB, ...\nAB? matches A, AB\n{x} - \"repeat exactly x times\"\n{x, y}\n\"repeat between x and y times\"\nAB {2} matches ABB\nAB{0,2} matches A, AB, ABB\nABB\n42\n2024-09-17 12:03:19\n\nRegex Expanded\nSix more regex operations.\nwey Gonzalez Phe, h ..\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n+ - \"one or more\"\n? - \"zero or one\" (\"optional\")\nAB+ matches AB, ABB, ABBB, ...\nAB? matches A, AB\n{x} - \"repeat exactly x times\"\n{x, y} - \"repeat between x and y times\"\nAB{2} matches ABB\nAB{0,2} matches A, AB, ABB\n(yes, it means these are the same: * = {0,), + = {1,}, and ? = (0,1})\n* 42\n2024-09-17 12:03:29\n",
        "Retrieved Audio": "The question mark.\nA question so far.\nThis is boring, confusing. You'll get more fun in a moment. And what more confusing in a moment? So we've introduced some very basic syntax. One more parentheses. It does what you think it should do.",
        "Retrieved Notes": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
        "Retrieved Video": "\n\n\n\n\nafter filtering (More on this next week)\nData\nDoes my data cover the right time frame?\n\"Scope\" questions are defined by\n.\nWhich brings us to Temporality\nyour question/problem and inform\nif you need better-scoped data.\nA\n2024-09-17 11:19:33\n",
        "Question": "Still a little confused how \u201c?\u201d Works",
        "Timestamp": 3229,
        "TA Response": "? indicates zero or one of whatever came directly before it. So AB? would match A and AB, but not ABB.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "The character class `[A-Za-z]` matches any single uppercase or lowercase letter. This means it will match any character from A to Z or a to z. It's a way to define a range of characters that includes all letters in both cases. For example, it would match 'A', 'b', 'Z', or 'm'.",
        "Recent Audio": "matches a single A, a single little A, a single B, or a single little B. So it's a way of defining a single character that could be any one of these things. Another example could be something like. ABC that matches the characters ABC and I can match that star zero more times. We'll see some examples in a moment. The plus character. This is like our *, but instead of it being zero more, it's one or more times. So AB plus matches AB, so there has to be at least one B, but it could be more than 1B as well. The question mark. Called the optional says that that character can occur 0 or one time. So A&B is optional. So a works and AB works and that's it. Almost there. Squiggly brackets Squiggly brackets says. Whatever is before me. Repeated exactly X times and it's the immediate character. Same kind of precedence as all of these operations. Right, so in this case it's saying I match an A and AB repeated twice. So it's equivalent to just saying. ABB. Exact same thing, but you can get fancier. You say a range, so when A followed by zero to two B's. So this matches AAB and ABB. OTT. There is some redundancy in regular expressions and that the star is exactly equivalent to this thing. You can do 0 comma, so zero or more times plus is equivalent to one comma. One or more times the question mark is equivalent to 01.",
        "Recent Video": "Regex Expanded\nSix more regex operations.\nGey Gonzalez Phe, h.\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n+ - \"one or more\"\n? - \"zero or one\" (\"optional\")\nAB+ matches AB, ABB, ABBB, ...\nAB? matches A, AB\n{x} - \"repeat exactly x times\"\n{x, y}\n\"repeat between x and y times\"\nAB {2} matches ABB\nAB{0,2} matches A, AB, ABB\nABB\n42\n2024-09-17 12:03:19\n\nRegex Expanded\nSix more regex operations.\nwey Gonzalez Phe, h ..\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n+ - \"one or more\"\n? - \"zero or one\" (\"optional\")\nAB+ matches AB, ABB, ABBB, ...\nAB? matches A, AB\n{x} - \"repeat exactly x times\"\n{x, y} - \"repeat between x and y times\"\nAB{2} matches ABB\nAB{0,2} matches A, AB, ABB\n(yes, it means these are the same: * = {0,), + = {1,}, and ? = (0,1})\n* 42\n2024-09-17 12:03:29\n",
        "Retrieved Audio": "Let's just go to the regular expression tool again here.\nOr between little A and little Z. So this little range thing is a way of writing a range of of valid characters. So I could also do something like 09.\nRight, so in this case it's saying I match an A and AB repeated twice. So it's equivalent to just saying.",
        "Retrieved Notes": "-------+-----------------+----------------+------------------+\nA character class matches a single character in its class. These characters can be hardcoded \u00e2\u0080\u0094\u00e2\u0080\u0094 in the case of `[aeiou]` \u00e2\u0080\u0094\u00e2\u0080\u0094 or shorthand can be specified to mean a range of characters. Examples include:\n1. `[A-Z]`: Any capitalized letter\n2. `[a-z]`: Any lowercase letter\n3. `[0-9]`: Any single digit\n4. `[A-Za-z]`: Any capitalized of lowercase letter\n5. `[A-Za-z0-9]`: Any capitalized or lowercase letter or single digit\n#### Examples\nLe\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0012\u0000c\u0000a\u0000s\u0000e\u0000_\u0000s\u0000t\u0000u\u0000d\u0000y\u0000_\u0000c\u0000l\u0000i\u0000m\u0000a\u0000t\u0000eIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000A\u0000\u0000\u0000.\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0000\u0000\u0000\u0000\u0000\u000e\u0000c\u0000a\u0000s\u0000e\u0000_\u0000s\u0000t\u0000u\u0000d\u0000y\u0000_\u0000H\u0000C\u0000EIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u00af\u0000\u0000\u0000.\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0000\u0000\u0000\u0000\u0000\n\u0000c\u0000l\u0000u\u0000s\u0000t\u0000e\u0000r\u0000i\u0000n\u0000gIlo\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
        "Retrieved Video": "Regex Expanded\nSix more regex operations.\nsey Gonzalez Phe, h ...\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n+ - \"one or more\"\n? - \"zero or one\" (\"optional\")\nAB+ matches AB, ABB, ABBB, ...\nAB? matches A, AB\n42\n2024-09-17 12:02:07\n\nRegex Expanded\nSix more regex operations.\nsey Gonzalez Phe, h ...\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n+ - \"one or more\"\n? - \"zero or one\" (\"optional\")\nAB+ matches AB, ABB, ABBB, ...\nAB? matches A, AB\n42\n2024-09-17 12:02:07\n\nRegex Expanded\nSix more regex operations.\nJoey Gonzalez Phe, h ...\n. - \"look for any character\"\n[] - \"define a character class\"\n.U.U.U. matches CUMULUS, JUGULUM\n[A-Za-z] matches A, a, B, b ...\n42\n2024-09-17 12:00:02\n",
        "Question": "Can you go over [A-Za-z] one more time please? ",
        "Timestamp": 3234,
        "TA Response": "[A-Za-z] is used as shorthand for the upper and lowercase letter character classes. This would match any upper or lowercase letter, like \"a\", \"A\", \"d\", \"E\", \"X\", etc.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "The `\\s` character class in regex matches any whitespace character, which includes spaces, tabs, newlines, and other whitespace characters. Therefore, `\\s` can be used to match tab-separated spaces as well.",
        "Recent Audio": "a regular expression. All right. So we talked about character class and we spent a little more time on that. So again, this is a way of describing any capital character, any number between 0 and 9. And this is saying any letter or digit. Rich and this represents just a single character in that class. It's creating a class of characters. There's some other built in ones that you'll use often. Slash W is equivalent to writing this, but this is hard to read, so you just say a word like character slash W/W1 or more times. And the slash D for digit and a slash S for matching a white space, so a space. Could be five times exactly, so I want to match the. Five spaces. Some crazy syntax. There's negation. So if I have something like it only works inside of a square bracket. So if I have this square brackets followed by this negation operator, then it's the opposite of this. So this matches anything that's not a letter between A&Z and uppercase. There's not an uppercase letter. Alright, so you've seen character classes. We have defining a character as some range of things that could be and negation character classes where I define a character is the opposite of something in this class. So anything that's not a capital A-Z. So if I did something like this. That's anything. That's not a number. Anything. As long as that letter is not a number, I can match that zero more times.",
        "Recent Video": "Character Classes\nA character class describes a set of characters belonging to the class.\nsey Gonzalez Phe, h.\n[A-Z]\n- any uppercase letter between A and Z\nRegex built-in classes:\n[0-9]\nany digit between 0 and 9\n> \\w is equivalent to [A-Za-z0-9]\n> \\d is equivalent to [0-9]\n[A-Za-z0-9]\n- any letter, any digit\nIs matches whitespace\nlw+\n15553\nUse ^ to negate a class = match any character other than what follows\n[^A-Z] - anything that is not an uppercase letter between A and Z\nEquivalently, the capital versions of the regex built-in classes are negations: \\W, \\D, and \\S\n43\n2024-09-17 12:05:05\n\nCharacter Classes\nA character class describes a set of characters belonging to the class.\nwey Gonzalez he, N.\n[A-Z]|- any uppercase letter between A and Z\nRegex built-in classes:\n[0-9]\nany digit between 0 and 9\n\\w is equivalent to [A-Za-z0-9]\n> \\d is equivalent to [0-9]\n[A-Za-z0-9]\nany letter, any digit\nIs matches whitespace\n[^0-2]\nlwt\n15583\nUseOto negate a class = match any character other than what follows\n[^A-Z] - anything that is not an uppercase letter between A and Z\nEquivalently, the capital versions of the regex built-in classes are negations: \\W, \\D, and \\S\n43\n2024-09-17 12:05:53\n",
        "Retrieved Audio": "And the slash D for digit and a slash S for matching a white space, so a space.\nLet's just go to the regular expression tool again here.\nSo which regular expression pattern will match the string ABBA select all that apply?",
        "Retrieved Notes": "T to memorize regex. At a high level, we want you to:\n1. Understand what regex is capable of\n2. Parse and create regex, given a reference table -->\nThere are a ton of resources to learn and experiment with regular expressions. A few are provided below:\n- [Official Regex Guide](https://docs.python.org/3/howto/regex.html)\n- [Data 100 Reference Sheet](https://ds100.org/sp22/resources/assets/hw/regex_reference.pdf) \n- [Regex101.com](https://regex101.com/)\n    - Be sure to check Python under the category on the \nthis with an example, consider the pattern `<div>.*</div>`. In the sentence below, we would hope that the bolded portions would be matched:\n\"This is a **\\<div>example\\</div>** of greediness **\\<div>in\\</div>** regular expressions.\"\nHowever, in reality, RegEx captures far more of the sentence. The way RegEx processes the text given that pattern is as follows:\n1. \"Look for the exact string \\<\\div>\" \n2. Then, \u00e2\u0080\u009clook for any character 0 or more times\" \n3. Then, \u00e2\u0080\u009clook for the exact string \\</div>\"\nThe resul\n=+==================+\n| `built in character class`                     | `\\w+` <br />    | Fawef_03 <br />|this person<br /> |\n|                                                | `\\d+`<br />     | 231123 <br />  |423 people<br />  |\n|                                                | `\\s+` <br />    | `whitespace`   | `non-whitespace` |\n+------------------------------------------------+-----------------+----------------+------------------+\n| `character class negation`: `[^]`              | [^a-z]+.        | P",
        "Retrieved Video": "sey Gonzalez De, h ..\nLECTURE 6\nText Wrangling and Regex\nUsing string methods and regular expressions (regex) to work with textual data\nData 100/Data 200, Fall 2024 @ UC Berkeley\nNarges Norouzi and Joseph E. Gonzalez\n17\n2024-09-17 11:32:41\n\nsey Gonzalez De, h ..\nLECTURE 6\nText Wrangling and Regex\nUsing string methods and regular expressions (regex) to work with textual data\nData 100/Data 200, Fall 2024 @ UC Berkeley\nNarges Norouzi and Joseph E. Gonzalez\n17\n2024-09-17 11:32:41\n\n of the regex built-in classes are negations: \\W, \\D, and \\S\n43\n2024-09-17 12:05:05\n",
        "Question": "Is there a Regex built in class for matching tab-separated space? Or does \\s do this ",
        "Timestamp": 3354,
        "TA Response": "I believe \\s matches tabs. \\t can be used to specifically match tabs, but I believe that won't be taught or tested in this class.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "Yes, it matters. In regex, lowercase `\\w` matches any word character (letters, digits, and underscores), while uppercase `\\W` matches any character that is not a word character. The capitalized versions of regex built-in classes are typically used for negations.",
        "Recent Audio": "like this. That's anything. That's not a number. Anything. As long as that letter is not a number, I can match that zero more times. It could also do this. Same thing. Anything that's not a digit. Zero more times. All right, And there's because this is a common thing to do negations, the capitalized versions of these letters here. Are the negated version, so I could also just write slash big D. Zero more times. Questions push in the back. Yeah. So why would I use this? I might say that I have like. Deer. And then, you know, some people put two spaces in between, so maybe I'm going to do slash. S0 to two times. Dear But if you put two spaces between deer and the next thing I want to match that. Put one space, I'm going to match that. I put zero spaces. You've got to put a space. I'll still match that too. So we're saying a space character. It could also be two tabs. So I could have two tabs that would also match. So a tab is another form of white space. I just drew a slash T as a tab. We'll see you in a moment. All right, so let's go through a little practice here and then we'll take a short break. All right, so this is saying I match any character, followed by you, followed by any character, followed by you, followed by any character, followed by you, followed by any character. So that's Cumulus.",
        "Recent Video": "Character Classes\nA character class describes a set of characters belonging to the class.\nJoey Gonzalez Me, N.\n[A-Z]]- any uppercase letter between A and Z\nRegex built-in classes:\n[0-9]\nany digit between 0 and 9 Dear \\$ {0,13 >\\w is equivalent to [A-Za-z0-9]\n~ > \\d is equivalent to [0-9]\n[A-Za-z0-9]\nany letter, any digit\n>> Is matches whitespace\n[^\\d ]*\nlwt\n15563\n10#\nUseOto negate a class = match any character other than what follows\n[^A-Z] - anything that is not an uppercase letter between A and Z\nEquivalently, the capital versions of the regex built-in classes are negations! \\. \\D, and \\S\n43\n2024-09-17 12:07:09\n\nSummary So Far\nJoey Gonzalez Phe, h.\nOperation\nExample\nMatches\nDoesn't match\nany character\n.U.U.U.\nCUMULUS\nSUCCUBUS\n(except newline)\nJUGULUM\nTUMUL TUOUS\ncharacter class\n[A-Za-z][a-z]*\nword\ncamelCase\nCapitalized\n4illegal\nrepeated exactly a\nj[aeiou] {3}hn\njhn\ntimes: {a}\njaoehn\njooohn\njaeiouhn\nrepeated from a to\nb times: {a,b}\nj[ou]{1,2}hn\njohn\njhn\njuohn\njooohn\nat least one\njo+hn\njohn\njhn\njoooooohn\njjohn\n44\n2024-09-17 12:07:33\n",
        "Retrieved Audio": "There's not an uppercase letter.\nSlash W is equivalent to writing this, but this is hard to read, so you just say a word like character slash W/W1 or more times.\nThat's my string. OK, then I can say string dot dot lower or string dot upper. That changes the case of all the letters to lower or upper case. I can do things like replace where I put some magic in here which will teach you today to replace parts of my stream. I can split a string. Why would I split a string? Or you want to split it out into separate words? So I'm going to split on this little space right here so I can split strings into lists.",
        "Retrieved Notes": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0012\u0000c\u0000a\u0000s\u0000e\u0000_\u0000s\u0000t\u0000u\u0000d\u0000y\u0000_\u0000c\u0000l\u0000i\u0000m\u0000a\u0000t\u0000eIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000A\u0000\u0000\u0000.\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0000\u0000\u0000\u0000\u0000\u000e\u0000c\u0000a\u0000s\u0000e\u0000_\u0000s\u0000t\u0000u\u0000d\u0000y\u0000_\u0000H\u0000C\u0000EIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u00af\u0000\u0000\u0000.\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0000\u0000\u0000\u0000\u0000\n\u0000c\u0000l\u0000u\u0000s\u0000t\u0000e\u0000r\u0000i\u0000n\u0000gIlo\nl matrix (e.g., $WW^T = I$). \nUsing calculus and optimization techniques (take EECS 127 if you're interested!), we find that this loss is minimized when \n$$Z = XW^T$$ \nThe proof for this is out of scope for Data 100, but for those who are interested, we:\n* Use Lagrangian multipliers to introduce the orthonormality constraint on $W$.\n* Took the derivative with respect to $W$ (which requires vector calculus) and solve for 0.\nThis gives us a very cool result of\n$$\\Sigma w^T = \\lambda w^T$$\n$\\Sigma$ is the cova\n-------+-----------------+----------------+------------------+\nA character class matches a single character in its class. These characters can be hardcoded \u00e2\u0080\u0094\u00e2\u0080\u0094 in the case of `[aeiou]` \u00e2\u0080\u0094\u00e2\u0080\u0094 or shorthand can be specified to mean a range of characters. Examples include:\n1. `[A-Z]`: Any capitalized letter\n2. `[a-z]`: Any lowercase letter\n3. `[0-9]`: Any single digit\n4. `[A-Za-z]`: Any capitalized of lowercase letter\n5. `[A-Za-z0-9]`: Any capitalized or lowercase letter or single digit\n#### Examples\nLe",
        "Retrieved Video": "ntly, the capital versions of the regex built-in classes are negations! \\. \\D, and \\S\n43\n2024-09-17 12:07:09\n\nntly, the capital versions of the regex built-in classes are negations! \\. \\D, and \\S\n43\n2024-09-17 12:07:09\n\nWhy Work With Text? Two Common Goals\n1. Canonicalization: Convert data that\nHey Gonzalez De, h.\nhas more than one possible\npresentation into a standard form.\nEx Join tables with mismatched labels\nCounty State\nCounty Population\n0\nDe Witt County\nIL\n0\nDeWitt\n16798\n1\nLac qui Parle County\nMN\n1\nLac Qui Parle\n8067\n2\nLewis and Clark County\nMT\n2\nLewis & Clark\n55716\n3 St. John the Baptist Parish\nLA\n3 St. John the Baptist\n43044\n21\n2024-09-17 11:33:43\n",
        "Question": "does it matter if its capital /W or lowercase /w",
        "Timestamp": 3462,
        "TA Response": "Do you mean \\w and \\W? There is a difference between these and it is important to use the one you want. \\w is equivalent to [A-Za-z0-9], and \\W actually matches everything OTHER than these characters.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "In regular expressions, the dot `.` is a metacharacter that matches any single character except for a newline. This means it includes alphabetic characters, numbers, and most other characters. So yes, numbers would count when using the `.` metacharacter.",
        "Recent Audio": "I needed three copies again. It's too many characters. OK. About this one. So J followed by one of these characters ORU one or two times followed by HN. So again matches these doesn't match just because three times and 0 times here. And this says I match J followed by at least one O and then a check. Do you see how I'm reading these? It's confusing. It's also really boring. You'll get a chance to do a lot of these in the upcoming assignments. All right, one more and then we'll take a break. What pattern matches any lower case alphabetic string that has a repeated vowel? Come on, just pick one. Let's let's some hints, not just any lower case alphabetic string that has repeated vowel. Rohingya refugees. That needs to be repeated. That's interesting. And lower case, that's a. That's an important signal there. All right, we got to go. So many of you got this right. What's going on here? Let's let's read the bottom one first. The bottom one says any character, any character. Lowercase, uppercase, repeated 0 more times, followed by a vowel. One or more times, followed by and it could be any of these valves, so AE would be fine. I'll repeat it A and then E, so one or more times. A would be fine, followed by any character repeated zero more times. It's too general. Poplin says any character between lower A and and lower Z's when he lower case character repeated zero more times.",
        "Recent Video": "Active poll\nSynchronous\nWhat pattern match\nJoey Gonzalez Phe, h ...\nlowercase alphabetic string\nthat has a repeated vowel\n(noon, peel, festoon, loop,\noodles, etc)?\nOperation\nExample\nMatches\nDoesn't match\nany character\n.U.U.U.\nCUMULUS\nSUCCUBUS\nJUGULUM\nTUMUL TUOUS\n\u00b7 .* [aeiou]+ .*\ncharacter class\n[A-Za-z][a-z]*\nword\ncamelCase\nCapitalized\n41llega1\nrepeated exactly a ][aeiou][3]hn\nJaochm\nThe\nJoin at\n\u00b7 [a-z]*(aa|ee|ii|oo|uu)[a-z]*\ntimes (0)\nJoochm\njarlouhn\nrepeated from a to\nb times (a,b)\n1[ou]{1,2]hn\nihm\nslido.com\nat least one\nJoshn\nJohn\n#3599 224\n2024-09-17 12:10:07\n\nActive poll\nSynchronous\nWhat pattern match\nJoey Gonzalez Phe, h ...\nlowercase alphabetic string\nthat has a repeated vowel\n(noon, peel, festoon, loop,\noodles, etc)?\nOperation\nExample\nMatches\nDoesn't match\nany character\n.U.U.U.\nCUMULUS\nSUCCUBUS\n[a-z]*(aa|ee|ii|oo|uu)[a-z]*\nJUGULUM\nTUMUL TUOUS\ncharacter class\n[A-Za-z][a-z]*\nword\ncamelCase\n79%\nCapitalized\n4illegal\nrepeated exactly a\ntimes (0)\nJ[aeiou](3]hn\njaochs\njhm\nJoin at\nJoochn\njasiouhn\n.* [aeiou]+ .*\nrepeated from a to\nb times (a,b)\n1[ou]{1,2]hn\nJuohn\nslido.com\n21%\nat least one\njohn\nJoooooohn\n11ohm\n#3599 224\n2024-09-17 12:11:19\n",
        "Retrieved Audio": "And this is saying any letter or digit.\nAnything that's not a digit.\nOr between little A and little Z. So this little range thing is a way of writing a range of of valid characters. So I could also do something like 09.",
        "Retrieved Notes": "-------+-----------------+----------------+------------------+\nA character class matches a single character in its class. These characters can be hardcoded \u00e2\u0080\u0094\u00e2\u0080\u0094 in the case of `[aeiou]` \u00e2\u0080\u0094\u00e2\u0080\u0094 or shorthand can be specified to mean a range of characters. Examples include:\n1. `[A-Z]`: Any capitalized letter\n2. `[a-z]`: Any lowercase letter\n3. `[0-9]`: Any single digit\n4. `[A-Za-z]`: Any capitalized of lowercase letter\n5. `[A-Za-z0-9]`: Any capitalized or lowercase letter or single digit\n#### Examples\nLe\nlanations**\n1. `.*SPB.*` only matches strings that contain the substring `SPB`.\n    - The `.*` metacharacter matches any amount of non-negative characters. Newlines do not count.  \n2. This regular expression matches 3 of any digit, then a dash, then 2 of any digit, then a dash, then 4 of any digit.\n    - You'll recognize this as the familiar Social Security Number regular expression.\n3. Matches any email with a `com` or `edu` domain, where all characters of the email are letters.\n    - At least one `.` must\n precede the domain name. Including a backslash `\\` before any metacharacter (in this case, the `.`) tells RegEx to match that character exactly.\n## Convenient RegEx\nHere are a few more convenient regular expressions. \n+------------------------------------------------+-----------------+----------------+------------------+\n| Operation                                      | Syntax Example  | Matches        |Doesn't Match     |\n+================================================+=================+===============",
        "Retrieved Video": "o.com\n21%\nat least one\njohn\nJoooooohn\n11ohm\n#3599 224\n2024-09-17 12:11:19\n\no.com\n21%\nat least one\njohn\nJoooooohn\n11ohm\n#3599 224\n2024-09-17 12:11:19\n\nCharacter Classes\nA character class describes a set of characters belonging to the class.\nJoey Gonzalez Phe, N.\n[A-Z]\nany uppercase letter between A and Z\nRegex built-in classes:\n[0-9]\nany digit between 0 and 9\n> \\w is equivalent to.[A-Za-z0-9]\nId is equivalent to [0-9]\n[A-Za-z0-9]\nany letter, any digit\nIs matches whitespace\n\\w+\n43\n2024-09-17 12:04:50\n",
        "Question": "Does a \".\" include only alphabet character or would numbers count?",
        "Timestamp": 3721,
        "TA Response": "It works for both as far as I know but I\u2019ll wait for the moderator to answer. Any character other than new lines are matched. So numbers also count.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "Yes, to find specific occurrences like the 2nd or 3rd match, you can use a combination of non-greedy patterns and additional logic in your code. For example, you can use a loop to iterate over all matches and select the one you need. In Python, you can use the `re.finditer()` function to get an iterator over all matches, and then access the desired occurrence by its index. This approach allows you to precisely control which match you want to extract from the text.",
        "Recent Audio": "it? Let's learn how. And go, here we go. All right, so. The way to read what's happening here is I'm looking for the exact string division, then I'm looking for any character zero more times, and then I'm looking for the exact string closed division. I'm going to find the longest thing that matches that pattern, so I grab this whole thing instead of what I wanted, which was each of these segments. So to fix that. We can use the non greedy version of star. That is, this isn't that exciting, really confusing. But all right, so we now say division followed by any character zero more times. But don't be greedy if you can end it with division and do a division. This will fix it. Try it. What's my syntax here? Question mark. Works magic. So we can see what just happened there says don't be greedy. If you can finish it with the rest of the regular expression, do that. Don't keep using the this character that matches everything as many times as you can. So this, this thing here, this question mark made it not greedy, greedy, not greedy. Questions. It's confusing play with a little bit. All right, last of the rules. There's another way to do this. I just want to show you another way. How else could I match this thing? So this is greedy. I'm going to try something a little bit crazy. What if I do not this zero more times? How does that work?",
        "Recent Video": "regular expressions 101\n> social\nSAVE & SHARE\nREGULAR EXPRESSION\nmatches (25 steps, 0.2ml)\nEXPLANATION\nRegex Version: ver. 1\n[r\" <div> [@<] << /div>\nJoey Gonzalez Phe, h ...\nO Update Regex ***-* 5\nMATCH INFORMATION\nA\nTEST STRING\nSave new Regex M+5\nThis.is.a .< div>example</div>-of-greediness .< div>in</div>.\nQUICK REFERENCE\nAdd to Community Libre\nregular expressions ..\nSearch reference\nA single char .. [abc)\nMANAGE REGEX\nAll Tokens\nA character .. [\"abc]\n# Delete Regex\n* Common Tokens\nA character L .. [a-z]\nFLAVOR\nGeneral Tokens\nA character .. [\"a-z]\n( PCRE2 (PHP >=7.3]\n\u0e3f Anchors\nA charac ... [a-zA-2]\n4> PCRE (PHP <7.3)\nO Meta Sequences\nAny single charact ... .\n<>> ECMAScript (JavaScript)\n( Quantifiers\nAlternate - mat .. a]b\n() Group Constructs\nAny whitespace ...\n/ Python\nGolang\n[] Character Classes\nAny non-whitesp ... \\$\n45 Java 8\nFlags/Modifiers\nAny digit\nSPONSORS\nX Substitution\nAny non-digit\nAny word charac .. \\\nThere are currently no sponsors.\nBecome a sponsor today!\nAny non-word c ... \\M\nMacch eve ... ( ?:... )\nThe Frontend\nFrontend Mastes\nCapture ever ... (. . . )\nMasters Knowledge\nYearly Sale\nQuest Sale ends\nZero or one of a a?\n$100 OFF\nsoont Accelerate\nfrom mid-level 60\nZero or more of a a*\nsenior developer.\n1:57 (13 chars) = match 2\nOne or more of a as\n2024-09-17 12:18:12\n\nregular expressions 101\n> social\nText - matches the character > with index 6218\nSAVE & SHARE\n(3E)\u00ab of 76,) literally (case sensitive)\n2 matches (26 steps, 0.2ml)\nEXPLANATION\nRegex Versionc ver. 1\nIF\" <div[<]@</div>\n- mg\nJoey Gonzalez Phe, h ...\nO Update Regex **** 5\nMATCH INFORMATION\nTEST STRING\nSave new Regex M+5\nThis.is.a .< div>example</div>-of -greediness .< div>in</div>.\nQUICK REFERENCE\nAdd to Community Libri\nregular expressions ..\nSearch reference\nA single char .. [abc]\nMANAGE REGEX\nAll Tokens\nA character .. [\"abc]\nDelete Regex\nCommon Tokens\nA character L .. [a-z]\nFLAVOR\nGeneral Tokens\nA character .. [\"a-z]\n\u00ab PCRE2 (PHP >=7.3)\nD Anchors\nA charac ... [a-zA-2]\n4 PCRE (PHP <7.3)\nMeta Sequences\nAny single charact ... .\n\u00ab/> ECMAScript (JavaScript)\n@ Quantifiers\nAlternate - mat .. a]b\nPython\n() Group Constructs\nAny whitespace ... \\s\nAny non-whitesp ... \\$\nGolang\n[] Character Classes\n45 Java 8\nFlags/Modifiers\nAny digit\nSPONSORS\nX Substitution\nAny non-digit\n10\nAny word charac .. \\\nThere are currently no sponsors.\nBecome a sponsor today!\nAny non-word c ... \\M\nMacch eve ... (7 :... )\nFrontend Mastes\nThe Frontend\nCapture ever ... (. . . )\nMasters Knowledge\nYearly Sale\nQuest Sale ends\nZero or one of a a2\n$100 OFF\nsoon! Accelerate\nfrom mid-level 60\nZero or more of a a*\nsenior developer.\n1:57 (13 chars) - match 2\nOne ce more of a as.\n2024-09-17 12:18:17\n",
        "Retrieved Audio": "All right, last of the rules. There's another way to do this. I just want to show you another way. How else could I match this thing? So this is greedy.\nWe can use the non greedy version of star.\nSo we can see what just happened there says don't be greedy. If you can finish it with the rest of the regular expression, do that. Don't keep using the this character that matches everything as many times as you can. So this, this thing here, this question mark made it not greedy, greedy, not greedy.",
        "Retrieved Notes": "                                               |                 | 55             |                  |\n|                                                |                 |                |                  | \n+------------------------------------------------+-----------------+----------------+------------------+\n### Greediness\nIn order to fully understand the last operation in the table, we have to discuss greediness. RegEx is greedy \u00e2\u0080\u0093 it will look for the longest possible match in a string. To motivate \nthis with an example, consider the pattern `<div>.*</div>`. In the sentence below, we would hope that the bolded portions would be matched:\n\"This is a **\\<div>example\\</div>** of greediness **\\<div>in\\</div>** regular expressions.\"\nHowever, in reality, RegEx captures far more of the sentence. The way RegEx processes the text given that pattern is as follows:\n1. \"Look for the exact string \\<\\div>\" \n2. Then, \u00e2\u0080\u009clook for any character 0 or more times\" \n3. Then, \u00e2\u0080\u009clook for the exact string \\</div>\"\nThe resul\nt would be all the characters starting from the leftmost \\<div> and the rightmost \\</div> (inclusive):\n\"This is a **\\<div>example\\</div> of greediness \\<div>in\\</div>** regular expressions.\"\nWe can fix this by making our pattern non-greedy, `<div>.*?</div>`. You can read up more in the documentation [here](https://docs.python.org/3/howto/regex.html#greedy-versus-non-greedy).\n### Examples\nLet's revisit our earlier problem of extracting date/time data from the given `.txt` files. Here is how the data looked.\n",
        "Retrieved Video": "Greediness\nRegex is greedy - it will look for the longest possible match in a string\njoey Gonzalez Phe, h ....\n<div> .*< /div>\nIn English:\n\"Look for the exact string <div>\"\nthen, \"look for any character 0 or more times\"\nthen, \"look for the exact string </div>\"\n\"This is a <div>example</div> of greediness <div>in</div> regular expressions.\"\n49\n2024-09-17 12:16:26\n\nGreediness\nRegex is greedy - it will look for the longest possible match in a string\njoey Gonzalez Phe, h ....\n<div> .*< /div>\nIn English:\n\"Look for the exact string <div>\"\nthen, \"look for any character 0 or more times\"\nthen, \"look for the exact string </div>\"\n\"This is a <div>example</div> of greediness <div>in</div> regular expressions.\"\n49\n2024-09-17 12:16:26\n\nGreediness\nRegex is greedy - it will look for the longest possible match in a string\nJoey Gonzalez Phe, h ...\n<div> .*< /div>\nIn English:\n\"Look for the exact string <div>\"\nthen, \"look for any character 0 or more times\"\nthen, \"look for, the exact string </div>\"\n\"This is a <div>example</div> of greediness <div>in</div> regular expressions.\"\n49\n2024-09-17 12:16:07\n",
        "Question": "it seems greedy finds the last occurrence and non greedy finds the first occurrence, is there any way to find something between? Eg 2nd or 3rd occurrence?",
        "Timestamp": 4091,
        "TA Response": "Great question! This will be covered very soon in the lecture, but you can use capture groups and a regex function to return ALL occurrences, and then you could index the list that is returned to get the occurrence that you want.",
        "Lecture": 6
    },
    {
        "Conversation History": "\t",
        "GPT Response": "In regular expressions, parentheses are used for grouping and capturing, but they are not necessary for simple matching patterns like `^ark` or `ark$`. The `^` and `$` are anchors that specify the position of the match (beginning or end of the line, respectively), and they apply directly to the pattern `ark` without needing additional grouping. Parentheses would be used if you needed to capture the matched text for further processing or if you were combining multiple patterns. In this context, `^ark` and `ark$` are straightforward position-based matches that do not require capturing.",
        "Recent Audio": "so we have this this this character here which remember we had before, meaning not a. For example, if I put it outside of these brackets, in fact I can put it at the beginning of a string that says I need to match a from the beginning of the string so it will no longer match 123 ABC. ABC at the very beginning of the stream. Almost there. So remember this has different behavior whether or not it's inside or outside of this character classes these square brackets. All right, one more dollar sign ABC money. Only matches ABC if it's at the end of the string. So will not match ABC, but would match by putting ABC here at the end. OK. Some practice. These are pretty straightforward, so arc only matches when it's at the beginning, not when there's a character before it. Arc dollar sign only matches when it's at the end, not at the beginning and slash converts. This star is no longer read this as a slash 0 more time or sorry it's no longer a special character which is anything it's instead it's just the period. This only matches cal.com and not cows com. If we got rid of this slash, it would match both of these. All right, questions. We're almost there. Let's start using this stuff. OK, so you're going to use these in your assignments. First thing you're going to learn about is raw strings. Raw strings are written with an R followed by your quotations.",
        "Recent Video": "Summary So Far\nJoey Gonzalez Phe, h ...\nOperation\nExample\nMatches\nDoesn't match\nbeginning of line\n^ark\nark two\nark o ark\ndark\nend of line\nark$\ndark\nark o ark\nark two\nescape character\ncow\\.com\ncow.com\ncowscom\n52\n2024-09-17 12:20:50\n\nBefore We Begin: Raw Strings in Python\nWhen specifying a pattern, we strongly suggest using raw strings.\nJoey Gonzalez Phe, h ...\n.\nA raw string is created by prepending r to the string delimiters\npattern = r\"[0-9]+\"\n(r\" ... \", r' ... ', \"\"\"\" ... \"\"\", [''' ... \"\"')\n54\n2024-09-17 12:21:33\n",
        "Retrieved Audio": "West OK, so we have this this this character here which remember we had before, meaning not a. For example, if I put it outside of these brackets, in fact I can put it at the beginning of a string that says I need to match a from the beginning of the string so it will no longer match 123 ABC.\nWe do need parentheses if I want to have AB this whole thing copied multiple times.\nSome practice. These are pretty straightforward, so arc only matches when it's at the beginning, not when there's a character before it.",
        "Retrieved Notes": "$`                             | ark$            | dark <br />    | ark two          | \n|                                                |                 | ark o ark      |                  |\n|                                                |                 |                |                  | \n+------------------------------------------------+-----------------+----------------+------------------+\n| `lazy version of zero or more` : `*?`          | 5.*?5           | 5005 <br />    | 5005005          | \n| \n----------------+-----------------+----------------+------------------+\n| `beginning of line`: `^`                       | ^ark            | ark two        | dark             | \n|                                                |                 | ark o ark      |                  |\n|                                                |                 |                |                  | \n+------------------------------------------------+-----------------+----------------+------------------+\n| `end of line`: `\nin regular expressions. However, they have another meaning; parentheses are often used to represent **capture groups**. Capture groups are essentially, a set of smaller regular expressions that match multiple substrings in text data. \nLet's take a look at an example.\n#### Example 1\n```{python}\n#| code-fold: false\n#| vscode: {languageId: python}\ntext = \"Observations: 03:04:53 - Horse awakens. \\\n        03:05:14 - Horse goes back to sleep.\"\n```\nSay we want to capture all occurences of time data (hour, minute,",
        "Retrieved Video": "Summary So Far\nJoey Gonzalez Phe, h ...\nOperation\nExample\nMatches\nDoesn't match\nbeginning of line\n^ark\nark two\nark o ark\ndark\nend of line\nark$\ndark\nark o ark\nark two\nescape character\ncow\\.com\ncow.com\ncowscom\n52\n2024-09-17 12:20:50\n\nSummary So Far\nJoey Gonzalez Phe, h ...\nOperation\nExample\nMatches\nDoesn't match\nbeginning of line\n^ark\nark two\nark o ark\ndark\nend of line\nark$\ndark\nark o ark\nark two\nescape character\ncow\\.com\ncow.com\ncowscom\n52\n2024-09-17 12:20:50\n\nRegex Even More Expanded\nThe last set, I promise.\n\\ - \"read the next character literally\"\na\\+b matches a+b\n[ a ]\n^ - \"match the beginning of a string\"\n$ - \"match the end of a string\"\n[abc does not match \"123 abc\"\nabc$ does not match \"abc 123\"\nBe careful: ^ has different behavior\ninside/outside of character classes! []\n51\n2024-09-17 12:20:21\n",
        "Question": "why do we not need parenthesis around ark? eg ^(ark) or (ark)$?",
        "Timestamp": 4308,
        "TA Response": "You don\u2019t need parentheses around ark because you're not interested in capturing \"ark\" as a separate group or applying some operator to it. You're just specifying that \"ark\" should appear at the start of the line. Same thing for ark$",
        "Lecture": 6
    }
]